// Copyright © 2023 OpenIM. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package OpenIMServer.club;
import "sdkws/sdkws.proto";
import "wrapperspb/wrapperspb.proto";
option go_package = "github.com/OpenIMSDK/protocol/club";

message CreateServerReq {
  string serverID = 1;
  string serverName = 2;
  string icon = 3;
  string description = 4;
  string banner = 5;
  int32 applyMode = 6;
  int32 inviteMode = 7;
  int32 searchable = 8;
  int32 userMutualAccessible = 9;
  int32 status = 10;
  string ownerUserID = 11;
  string ex = 12;
}
message CreateServerResp {
    string serverID = 1;
}

message CreateGroupCategoryReq {
  string serverID = 1;
  string categoryName = 2;
  string ownerUserID = 3;
}
message CreateGroupCategoryResp {
    sdkws.GroupCategoryInfo groupCategory = 1;
}

message DeleteGroupCategoryReq {
  string serverID = 1;
  repeated string categoryIDs = 2;
}
message DeleteGroupCategoryResp {
}

message SetGroupCategoryInfoReq {
  string serverID = 1;
  string categoryName = 2;
  string categoryID = 3;
}
message SetGroupCategoryInfoResp {
    sdkws.GroupCategoryInfo groupCategory = 1;
}

message SetGroupCategoryOrderReq {
  string serverID = 1;
  repeated string categoryIDs = 2;
}
message SetGroupCategoryOrderResp {
}


message GetServerRecommendedListReq {
}
message GetServerRecommendecListResp {
  repeated sdkws.ServerFullInfo servers = 1;
}

message GetServersInfoReq { repeated string serverIDs = 1; }
message GetServersInfoResp { 
  repeated GetServerInfoResp servers = 1;
}
message GetServerInfoResp { 
  sdkws.ServerInfo server = 1; 
  repeated sdkws.GroupCategoryListInfo categoryList = 2;
  bool joined = 3;
}

message DeleteServerReq { repeated string serverIDList = 1; }
message DeleteServerResp {}

message DismissServerReq{
  string serverID = 1;
  bool deleteMember = 2;
}
message DismissServerResp{
}

message SetServerInfoReq{
  sdkws.ServerInfoForSet serverInfoForSet = 1;
}
message SetServerInfoResp{}

message SearchServerReq {
  sdkws.RequestPagination pagination = 1;
  string keyword = 2;
}
message SearchServerResp {
  uint32 total = 1;
  repeated sdkws.ServerInfo serverInfos = 2;
}

message GetServerAbstractInfoReq{
  repeated string serverIDs = 1;
}
message ServerAbstractInfo{
  string serverID = 1;
  uint32 serverMemberNumber = 2;
  uint64 serverMemberListHash = 3;
}
message GetServerAbstractInfoResp{
  repeated ServerAbstractInfo serverAbstractInfos = 1;
}

message MuteServerReq{
  string serverID = 1;
}
message MuteServerResp{
}


message CancelMuteServerReq{
  string serverID = 1;
}
message CancelMuteServerResp{
}

///////////////////////serverMember///////////////////////////////
message GetServerMemberListReq {
  sdkws.RequestPagination pagination = 1;
  string serverID = 2;
  int32 filter = 3;
}
message GetServerMemberListResp {
  uint32 total = 1;
  repeated sdkws.ServerMemberFullInfo members = 2;
}

message GetServerMembersInfoReq {
  string serverID = 1;
  repeated string userIDs = 2;
}
message GetServerMembersInfoResp {
  repeated sdkws.ServerMemberFullInfo members = 1;
}

message KickServerMemberReq {
  string serverID = 1;
  repeated string kickedUserIDs = 2;
  string reason = 3;
}
message KickServerMemberResp {
}

message GetJoinedServerListReq {
  sdkws.RequestPagination pagination = 1;
  string fromUserID = 2;
}
message GetJoinedServerListResp{
  uint32 total = 1;
  repeated  sdkws.ServerInfo servers = 2;
}

message GetServerMembersCMSReq {
  sdkws.RequestPagination pagination = 1;
  string serverID = 2;
  string userName = 3;
}
message GetServerMembersCMSResp {
  uint32 total = 1;
  repeated sdkws.ServerMemberFullInfo members = 2;
}

message MuteServerMemberReq{
  string serverID = 1;
  string userID = 2;
  uint32 mutedSeconds = 3;
}
message MuteServerMemberResp{
}

message CancelMuteServerMemberReq{
  string serverID = 1;
  string userID = 2;
}
message CancelMuteServerMemberResp{
}

message JoinServerReq{
  string serverID = 1;
  string reqMessage = 2;
  int32 joinSource = 3;
  string userID = 4;
  string inviterUserID = 5;
}
message JoinServerResp{}

message QuitServerReq{
  string serverID = 1;
  string userID = 2;
}
message QuitServerResp{}
message SetServerMemberInfo{
  string serverID = 1;
  string userID = 2;
  OpenIMServer.protobuf.StringValue nickname = 3;
  OpenIMServer.protobuf.StringValue faceURL = 4;
  OpenIMServer.protobuf.Int32Value roleLevel = 5;
  OpenIMServer.protobuf.StringValue ex = 6;
}
message SetServerMemberInfoReq{
  repeated SetServerMemberInfo members = 1;
}
message SetServerMemberInfoResp{
}

message GetServerMemberUserIDsReq { string serverID = 1; }
message GetServerMemberUserIDsResp { repeated string userIDs = 1; }

message GetUserInServerMembersReq {
  string userID = 1;
  repeated string serverIDs = 2;
}
message GetUserInServerMembersResp{
  repeated sdkws.ServerMemberFullInfo members = 1;
}

message GetServerMemberRoleLevelReq{
  string serverID = 1;
  repeated int32 roleLevels = 2;
}
message GetServerMemberRoleLevelResp {
  repeated sdkws.ServerMemberFullInfo members = 1;
}

message GetServerMemberCacheReq {
  string serverID = 1;
  string serverMemberID = 2;
}
message GetServerMemberCacheResp {
  sdkws.ServerMemberFullInfo member = 1;
}

message TransferServerOwnerReq {
  string serverID = 1;
  string oldOwnerUserID = 2;
  string newOwnerUserID = 3;
}
message TransferServerOwnerResp{

}

// group
message GetJoinedServerGroupListReq {
  sdkws.RequestPagination pagination = 1;
  string fromUserID = 2;
}
message GetJoinedServerGroupListResp{
  uint32 total = 1;
  repeated  sdkws.GroupInfo groups = 2;
}

message CreateServerGroupReq{
  sdkws.GroupInfo groupInfo = 1;
  string ownerUserID = 2; //owner
  string dappID = 3;
}
message CreateServerGroupResp{
  sdkws.GroupInfo groupInfo = 1;
}

message SetServerGroupInfoReq{
  sdkws.GroupInfo groupInfo = 1;
  string dappID = 2;
}
message SetServerGroupInfoResp{
  sdkws.GroupInfo groupInfo = 1;
  sdkws.GroupDappFullInfo dapp = 2;
}

message SetServerGroupOrderReq{
  string serverID = 1;
  repeated sdkws.GroupCategoryListInfo categoryList = 2;

}
message SetServerGroupOrderResp{
}

message DeleteServerGroupReq{
  string serverID = 1;
  repeated string groupIDs = 2;
}
message DeleteServerGroupResp{
}

message MuteServerGroupReq{
  string serverID = 1;
  string groupID = 2;
}
message MuteServerGroupResp{
}

message CancelMuteServerGroupReq{
  string serverID = 1;
  string groupID = 2;
}
message CancelMuteServerGroupResp{
}

message GetServerGroupMemberUserIDsReq{
  string groupID = 1;
}
message GetServerGroupMemberUserIDsResp{
  repeated string userIDs = 1;
}

message GetServerGroupsInfoReq{
  repeated string groupIDs = 1;
}
message GetServerGroupsInfoResp{
  repeated sdkws.GroupInfo groupInfos = 1;
}
// serverRequest

message ServerApplicationResponseReq{
  string serverID = 1;
  string fromUserID = 2;
  string handledMsg = 3;
  int32 handleResult = 4;
}
message ServerApplicationResponseResp{
}

message GetServerApplicationListReq {
  sdkws.RequestPagination pagination = 1;
  string fromUserID = 2; //owner or admin
}
message GetServerApplicationListResp {
  uint32 total = 1;
  repeated sdkws.ServerRequest serverRequests = 2;
}

message GetUserReqApplicationListReq{
  sdkws.RequestPagination pagination = 1;
  string userID = 2;
}
message GetUserReqApplicationListResp{
  uint32 total = 1;
  repeated sdkws.ServerRequest serverRequests = 2;
}

message getServerUsersReqApplicationListReq {
  string serverID =1;
  repeated string userIDs = 2;
}
message getServerUsersReqApplicationListResp {
  int64 total = 1;
  repeated sdkws.ServerRequest serverRequests = 2;
}


//////////server_black////////////////
message BanServerMemberReq{
  string serverID = 1;
  repeated string blockUserIDs = 2;
  string operatorUserID = 3;
  string ex = 4;
}
message BanServerMemberResp{
  sdkws.ServerBlackFullInfo black = 1;
}

message CancelBanServerMemberReq{
  string serverID = 1;
  repeated string blockUserIDs = 2;
  string operatorUserID = 3;
  string ex = 4;
}
message CancelBanServerMemberResp{

}

message GetServerBlackListReq{
  string serverID = 1;
  sdkws.RequestPagination pagination = 2;
}
message GetServerBlackListResp{
  repeated sdkws.ServerBlackFullInfo blacks = 1;
  int64 total = 2;
}

//////////serverRole////////////////
message GetServerRoleListReq {
  sdkws.RequestPagination pagination = 1;
  string serverID = 2;
  int32 filter = 3;
}
message GetServerRoleListResp {
  uint32 total = 1;
  repeated sdkws.ServerRole roles = 2;
}

message GetServerRolesInfoReq {
    repeated string roleIDs = 1;
}
message GetServerRolesInfoResp {
  repeated sdkws.ServerRole roles = 2;
}
service club {
  // 创建部落
  rpc createServer(CreateServerReq) returns (CreateServerResp);
  //获取部落列表
  rpc getServerRecommendedList(GetServerRecommendedListReq) returns (GetServerRecommendecListResp);
  //获取部落详情
  rpc getServersInfo(GetServersInfoReq) returns (GetServersInfoResp);
  //加入部落
  rpc joinServer(JoinServerReq) returns (JoinServerResp);
  //退出部落
  rpc quitServer(QuitServerReq) returns(QuitServerResp);
  //解散部落
  rpc dismissServer(DismissServerReq) returns(DismissServerResp);
  //设置部落信息
  rpc setServerInfo(SetServerInfoReq) returns(SetServerInfoResp);
  // 搜索部落
  rpc searchServer(SearchServerReq) returns(SearchServerResp);
  //获取部落信息hash值
  rpc getServerAbstractInfo(GetServerAbstractInfoReq) returns (GetServerAbstractInfoResp);
  //对某个部落禁言
  rpc muteServer(MuteServerReq) returns(MuteServerResp);
  //对某个部落取消禁言
  rpc cancelMuteServer(CancelMuteServerReq) returns(CancelMuteServerResp);

  //groupCategory

  // 创建分组
  rpc createGroupCategory(CreateGroupCategoryReq) returns (CreateGroupCategoryResp);
  rpc deleteGroupCategory(DeleteGroupCategoryReq) returns(DeleteGroupCategoryResp);
  rpc setGroupCategoryInfo(SetGroupCategoryInfoReq) returns(SetGroupCategoryInfoResp);
  rpc setGroupCategoryOrder(SetGroupCategoryOrderReq) returns(SetGroupCategoryOrderResp);

  // /serverRequest

  // 部落主或管理员处理进部落申请
  rpc serverApplicationResponse(ServerApplicationResponseReq) returns(ServerApplicationResponseResp);
  //（以管理员或群主身份）获取群的加部落申请
  rpc getServerApplicationList(GetServerApplicationListReq) returns(GetServerApplicationListResp);
  // 获取用户自己的主动加部落申请
  rpc getUserReqApplicationList(GetUserReqApplicationListReq) returns(GetUserReqApplicationListResp);
  // 获取该部落用户的加部落申请
  rpc getServerUsersReqApplicationList(getServerUsersReqApplicationListReq) returns(getServerUsersReqApplicationListResp);


  // group

  //对某个部落禁言
  rpc muteServerGroup(MuteServerGroupReq) returns(MuteServerGroupResp);
  //对某个部落取消禁言
  rpc cancelMuteServerGroup(CancelMuteServerGroupReq) returns(CancelMuteServerGroupResp);
  // 获取某个人已加入群
  rpc getJoinedServerGroupList(GetJoinedServerGroupListReq) returns (GetJoinedServerGroupListResp);
  // 创建部落房间
  rpc createServerGroup(CreateServerGroupReq) returns(CreateServerGroupResp);
  rpc setServerGroupInfo(SetServerGroupInfoReq) returns(SetServerGroupInfoResp);
  rpc setServerGroupOrder(SetServerGroupOrderReq) returns(SetServerGroupOrderResp);
  rpc deleteServerGroup(DeleteServerGroupReq) returns(DeleteServerGroupResp);
  // 获取某个部落房间所属部落的成员
  rpc getServerGroupMemberUserIDs(GetServerGroupMemberUserIDsReq) returns(GetServerGroupMemberUserIDsResp);
  //获取指定部落群信息
  rpc getServerGroupsInfo(GetServerGroupsInfoReq) returns(GetServerGroupsInfoResp);


  // serverMember

  // 获取某个部落的部落成员
  rpc getServerMemberList(GetServerMemberListReq) returns(GetServerMemberListResp);
  // 获取某个部落的指定部落成员
  rpc getServerMembersInfo(GetServerMembersInfoReq) returns(GetServerMembersInfoResp);
  // 踢出部落
  rpc kickServerMember(KickServerMemberReq) returns (KickServerMemberResp);
  // 获取某个人已加入部落
  rpc getJoinedServerList(GetJoinedServerListReq) returns (GetJoinedServerListResp);
  rpc getServerMembersCMS(GetServerMembersCMSReq) returns(GetServerMembersCMSResp);
  // 对某个部落成员禁言
  rpc muteServerMember(MuteServerMemberReq) returns(MuteServerMemberResp);
  // 对某个部落成员取消禁言
  rpc cancelMuteServerMember(CancelMuteServerMemberReq) returns(CancelMuteServerMemberResp);
  // 设置部落成员信息
  rpc setServerMemberInfo(SetServerMemberInfoReq) returns (SetServerMemberInfoResp);
  // 获取某个用户在指定部落中的信息
  rpc getUserInServerMembers(GetUserInServerMembersReq) returns (GetUserInServerMembersResp);
  // 获取部落成员用户ID
  rpc getServerMemberUserIDs(GetServerMemberUserIDsReq) returns (GetServerMemberUserIDsResp);
  // 查询部落组中对应级别的成员
  rpc GetServerMemberRoleLevel(GetServerMemberRoleLevelReq)returns (GetServerMemberRoleLevelResp);
  rpc GetServerMemberCache(GetServerMemberCacheReq) returns (GetServerMemberCacheResp);
    //转让群主
  rpc transferServerOwner(TransferServerOwnerReq) returns(TransferServerOwnerResp);

  //server_black
  rpc banServerMember(BanServerMemberReq) returns(BanServerMemberResp);
  rpc cancelBanServerMember(CancelBanServerMemberReq) returns(CancelBanServerMemberResp);
  rpc getServerBlackList(GetServerBlackListReq) returns(GetServerBlackListResp);

  // serverRole
  rpc getServerRoleList(GetServerRoleListReq) returns(GetServerRoleListResp);
  rpc getServerRolesInfo(GetServerRolesInfoReq) returns(GetServerRolesInfoResp);
}
