// Copyright Â© 2023 OpenIM. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: club/club.proto

package club

import (
	context "context"
	sdkws "github.com/OpenIMSDK/protocol/sdkws"
	wrapperspb "github.com/OpenIMSDK/protocol/wrapperspb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateServerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID             string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	ServerName           string `protobuf:"bytes,2,opt,name=serverName,proto3" json:"serverName,omitempty"`
	Icon                 string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Description          string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Banner               string `protobuf:"bytes,5,opt,name=banner,proto3" json:"banner,omitempty"`
	ApplyMode            int32  `protobuf:"varint,6,opt,name=applyMode,proto3" json:"applyMode,omitempty"`
	InviteMode           int32  `protobuf:"varint,7,opt,name=inviteMode,proto3" json:"inviteMode,omitempty"`
	Searchable           int32  `protobuf:"varint,8,opt,name=searchable,proto3" json:"searchable,omitempty"`
	UserMutualAccessible int32  `protobuf:"varint,9,opt,name=userMutualAccessible,proto3" json:"userMutualAccessible,omitempty"`
	Status               int32  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	OwnerUserID          string `protobuf:"bytes,11,opt,name=ownerUserID,proto3" json:"ownerUserID,omitempty"`
	Ex                   string `protobuf:"bytes,12,opt,name=ex,proto3" json:"ex,omitempty"`
}

func (x *CreateServerReq) Reset() {
	*x = CreateServerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerReq) ProtoMessage() {}

func (x *CreateServerReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerReq.ProtoReflect.Descriptor instead.
func (*CreateServerReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{0}
}

func (x *CreateServerReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *CreateServerReq) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *CreateServerReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *CreateServerReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateServerReq) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *CreateServerReq) GetApplyMode() int32 {
	if x != nil {
		return x.ApplyMode
	}
	return 0
}

func (x *CreateServerReq) GetInviteMode() int32 {
	if x != nil {
		return x.InviteMode
	}
	return 0
}

func (x *CreateServerReq) GetSearchable() int32 {
	if x != nil {
		return x.Searchable
	}
	return 0
}

func (x *CreateServerReq) GetUserMutualAccessible() int32 {
	if x != nil {
		return x.UserMutualAccessible
	}
	return 0
}

func (x *CreateServerReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateServerReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *CreateServerReq) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type CreateServerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
}

func (x *CreateServerResp) Reset() {
	*x = CreateServerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerResp) ProtoMessage() {}

func (x *CreateServerResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerResp.ProtoReflect.Descriptor instead.
func (*CreateServerResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{1}
}

func (x *CreateServerResp) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

type CreateGroupCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID     string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	CategoryName string `protobuf:"bytes,2,opt,name=categoryName,proto3" json:"categoryName,omitempty"`
	OwnerUserID  string `protobuf:"bytes,3,opt,name=ownerUserID,proto3" json:"ownerUserID,omitempty"`
}

func (x *CreateGroupCategoryReq) Reset() {
	*x = CreateGroupCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupCategoryReq) ProtoMessage() {}

func (x *CreateGroupCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupCategoryReq.ProtoReflect.Descriptor instead.
func (*CreateGroupCategoryReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{2}
}

func (x *CreateGroupCategoryReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *CreateGroupCategoryReq) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *CreateGroupCategoryReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

type CreateGroupCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCategory *sdkws.GroupCategory `protobuf:"bytes,1,opt,name=groupCategory,proto3" json:"groupCategory,omitempty"`
}

func (x *CreateGroupCategoryResp) Reset() {
	*x = CreateGroupCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupCategoryResp) ProtoMessage() {}

func (x *CreateGroupCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupCategoryResp.ProtoReflect.Descriptor instead.
func (*CreateGroupCategoryResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{3}
}

func (x *CreateGroupCategoryResp) GetGroupCategory() *sdkws.GroupCategory {
	if x != nil {
		return x.GroupCategory
	}
	return nil
}

type GetServerRecommendedListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetServerRecommendedListReq) Reset() {
	*x = GetServerRecommendedListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerRecommendedListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerRecommendedListReq) ProtoMessage() {}

func (x *GetServerRecommendedListReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerRecommendedListReq.ProtoReflect.Descriptor instead.
func (*GetServerRecommendedListReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{4}
}

type GetServerRecommendecListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*sdkws.ServerFullInfo `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *GetServerRecommendecListResp) Reset() {
	*x = GetServerRecommendecListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerRecommendecListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerRecommendecListResp) ProtoMessage() {}

func (x *GetServerRecommendecListResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerRecommendecListResp.ProtoReflect.Descriptor instead.
func (*GetServerRecommendecListResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{5}
}

func (x *GetServerRecommendecListResp) GetServers() []*sdkws.ServerFullInfo {
	if x != nil {
		return x.Servers
	}
	return nil
}

type GetServersInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerIDs []string `protobuf:"bytes,1,rep,name=serverIDs,proto3" json:"serverIDs,omitempty"`
}

func (x *GetServersInfoReq) Reset() {
	*x = GetServersInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServersInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServersInfoReq) ProtoMessage() {}

func (x *GetServersInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServersInfoReq.ProtoReflect.Descriptor instead.
func (*GetServersInfoReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{6}
}

func (x *GetServersInfoReq) GetServerIDs() []string {
	if x != nil {
		return x.ServerIDs
	}
	return nil
}

type GetServersInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*GetServerInfoResp `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *GetServersInfoResp) Reset() {
	*x = GetServersInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServersInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServersInfoResp) ProtoMessage() {}

func (x *GetServersInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServersInfoResp.ProtoReflect.Descriptor instead.
func (*GetServersInfoResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{7}
}

func (x *GetServersInfoResp) GetServers() []*GetServerInfoResp {
	if x != nil {
		return x.Servers
	}
	return nil
}

type GetServerInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server       *sdkws.ServerInfo              `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	CategoryList []*sdkws.GroupCategoryListInfo `protobuf:"bytes,2,rep,name=categoryList,proto3" json:"categoryList,omitempty"`
	Joined       bool                           `protobuf:"varint,3,opt,name=joined,proto3" json:"joined,omitempty"`
}

func (x *GetServerInfoResp) Reset() {
	*x = GetServerInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerInfoResp) ProtoMessage() {}

func (x *GetServerInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerInfoResp.ProtoReflect.Descriptor instead.
func (*GetServerInfoResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{8}
}

func (x *GetServerInfoResp) GetServer() *sdkws.ServerInfo {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *GetServerInfoResp) GetCategoryList() []*sdkws.GroupCategoryListInfo {
	if x != nil {
		return x.CategoryList
	}
	return nil
}

func (x *GetServerInfoResp) GetJoined() bool {
	if x != nil {
		return x.Joined
	}
	return false
}

type DeleteServerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerIDList []string `protobuf:"bytes,1,rep,name=serverIDList,proto3" json:"serverIDList,omitempty"`
}

func (x *DeleteServerReq) Reset() {
	*x = DeleteServerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServerReq) ProtoMessage() {}

func (x *DeleteServerReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServerReq.ProtoReflect.Descriptor instead.
func (*DeleteServerReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteServerReq) GetServerIDList() []string {
	if x != nil {
		return x.ServerIDList
	}
	return nil
}

type DeleteServerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteServerResp) Reset() {
	*x = DeleteServerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServerResp) ProtoMessage() {}

func (x *DeleteServerResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServerResp.ProtoReflect.Descriptor instead.
func (*DeleteServerResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{10}
}

type DismissServerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID     string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	DeleteMember bool   `protobuf:"varint,2,opt,name=deleteMember,proto3" json:"deleteMember,omitempty"`
}

func (x *DismissServerReq) Reset() {
	*x = DismissServerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DismissServerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DismissServerReq) ProtoMessage() {}

func (x *DismissServerReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DismissServerReq.ProtoReflect.Descriptor instead.
func (*DismissServerReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{11}
}

func (x *DismissServerReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *DismissServerReq) GetDeleteMember() bool {
	if x != nil {
		return x.DeleteMember
	}
	return false
}

type DismissServerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DismissServerResp) Reset() {
	*x = DismissServerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DismissServerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DismissServerResp) ProtoMessage() {}

func (x *DismissServerResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DismissServerResp.ProtoReflect.Descriptor instead.
func (*DismissServerResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{12}
}

type SetServerInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerInfoForSet *sdkws.ServerInfoForSet `protobuf:"bytes,1,opt,name=serverInfoForSet,proto3" json:"serverInfoForSet,omitempty"`
}

func (x *SetServerInfoReq) Reset() {
	*x = SetServerInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetServerInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetServerInfoReq) ProtoMessage() {}

func (x *SetServerInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetServerInfoReq.ProtoReflect.Descriptor instead.
func (*SetServerInfoReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{13}
}

func (x *SetServerInfoReq) GetServerInfoForSet() *sdkws.ServerInfoForSet {
	if x != nil {
		return x.ServerInfoForSet
	}
	return nil
}

type SetServerInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetServerInfoResp) Reset() {
	*x = SetServerInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetServerInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetServerInfoResp) ProtoMessage() {}

func (x *SetServerInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetServerInfoResp.ProtoReflect.Descriptor instead.
func (*SetServerInfoResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{14}
}

// /////////////////////serverMember///////////////////////////////
type GetServerMemberListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *sdkws.RequestPagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	ServerID   string                   `protobuf:"bytes,2,opt,name=serverID,proto3" json:"serverID,omitempty"`
	Filter     int32                    `protobuf:"varint,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *GetServerMemberListReq) Reset() {
	*x = GetServerMemberListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerMemberListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerMemberListReq) ProtoMessage() {}

func (x *GetServerMemberListReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerMemberListReq.ProtoReflect.Descriptor instead.
func (*GetServerMemberListReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{15}
}

func (x *GetServerMemberListReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetServerMemberListReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *GetServerMemberListReq) GetFilter() int32 {
	if x != nil {
		return x.Filter
	}
	return 0
}

type GetServerMemberListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   uint32                        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Members []*sdkws.ServerMemberFullInfo `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetServerMemberListResp) Reset() {
	*x = GetServerMemberListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerMemberListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerMemberListResp) ProtoMessage() {}

func (x *GetServerMemberListResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerMemberListResp.ProtoReflect.Descriptor instead.
func (*GetServerMemberListResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{16}
}

func (x *GetServerMemberListResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetServerMemberListResp) GetMembers() []*sdkws.ServerMemberFullInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

type GetServerMembersInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID string   `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	UserIDs  []string `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *GetServerMembersInfoReq) Reset() {
	*x = GetServerMembersInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerMembersInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerMembersInfoReq) ProtoMessage() {}

func (x *GetServerMembersInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerMembersInfoReq.ProtoReflect.Descriptor instead.
func (*GetServerMembersInfoReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{17}
}

func (x *GetServerMembersInfoReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *GetServerMembersInfoReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type GetServerMembersInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*sdkws.ServerMemberFullInfo `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetServerMembersInfoResp) Reset() {
	*x = GetServerMembersInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerMembersInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerMembersInfoResp) ProtoMessage() {}

func (x *GetServerMembersInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerMembersInfoResp.ProtoReflect.Descriptor instead.
func (*GetServerMembersInfoResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{18}
}

func (x *GetServerMembersInfoResp) GetMembers() []*sdkws.ServerMemberFullInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

type KickServerMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID      string   `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	KickedUserIDs []string `protobuf:"bytes,2,rep,name=kickedUserIDs,proto3" json:"kickedUserIDs,omitempty"`
	Reason        string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *KickServerMemberReq) Reset() {
	*x = KickServerMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickServerMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickServerMemberReq) ProtoMessage() {}

func (x *KickServerMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickServerMemberReq.ProtoReflect.Descriptor instead.
func (*KickServerMemberReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{19}
}

func (x *KickServerMemberReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *KickServerMemberReq) GetKickedUserIDs() []string {
	if x != nil {
		return x.KickedUserIDs
	}
	return nil
}

func (x *KickServerMemberReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type KickServerMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KickServerMemberResp) Reset() {
	*x = KickServerMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickServerMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickServerMemberResp) ProtoMessage() {}

func (x *KickServerMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickServerMemberResp.ProtoReflect.Descriptor instead.
func (*KickServerMemberResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{20}
}

type GetJoinedServerListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *sdkws.RequestPagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	FromUserID string                   `protobuf:"bytes,2,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
}

func (x *GetJoinedServerListReq) Reset() {
	*x = GetJoinedServerListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJoinedServerListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJoinedServerListReq) ProtoMessage() {}

func (x *GetJoinedServerListReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJoinedServerListReq.ProtoReflect.Descriptor instead.
func (*GetJoinedServerListReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{21}
}

func (x *GetJoinedServerListReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetJoinedServerListReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

type GetJoinedServerListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   uint32              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Servers []*sdkws.ServerInfo `protobuf:"bytes,2,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *GetJoinedServerListResp) Reset() {
	*x = GetJoinedServerListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJoinedServerListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJoinedServerListResp) ProtoMessage() {}

func (x *GetJoinedServerListResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJoinedServerListResp.ProtoReflect.Descriptor instead.
func (*GetJoinedServerListResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{22}
}

func (x *GetJoinedServerListResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetJoinedServerListResp) GetServers() []*sdkws.ServerInfo {
	if x != nil {
		return x.Servers
	}
	return nil
}

type GetServerMembersCMSReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *sdkws.RequestPagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	ServerID   string                   `protobuf:"bytes,2,opt,name=serverID,proto3" json:"serverID,omitempty"`
	UserName   string                   `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
}

func (x *GetServerMembersCMSReq) Reset() {
	*x = GetServerMembersCMSReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerMembersCMSReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerMembersCMSReq) ProtoMessage() {}

func (x *GetServerMembersCMSReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerMembersCMSReq.ProtoReflect.Descriptor instead.
func (*GetServerMembersCMSReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{23}
}

func (x *GetServerMembersCMSReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetServerMembersCMSReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *GetServerMembersCMSReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type GetServerMembersCMSResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   uint32                        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Members []*sdkws.ServerMemberFullInfo `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetServerMembersCMSResp) Reset() {
	*x = GetServerMembersCMSResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerMembersCMSResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerMembersCMSResp) ProtoMessage() {}

func (x *GetServerMembersCMSResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerMembersCMSResp.ProtoReflect.Descriptor instead.
func (*GetServerMembersCMSResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{24}
}

func (x *GetServerMembersCMSResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetServerMembersCMSResp) GetMembers() []*sdkws.ServerMemberFullInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

type MuteServerMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID     string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	UserID       string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	MutedSeconds uint32 `protobuf:"varint,3,opt,name=mutedSeconds,proto3" json:"mutedSeconds,omitempty"`
}

func (x *MuteServerMemberReq) Reset() {
	*x = MuteServerMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteServerMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteServerMemberReq) ProtoMessage() {}

func (x *MuteServerMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteServerMemberReq.ProtoReflect.Descriptor instead.
func (*MuteServerMemberReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{25}
}

func (x *MuteServerMemberReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *MuteServerMemberReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *MuteServerMemberReq) GetMutedSeconds() uint32 {
	if x != nil {
		return x.MutedSeconds
	}
	return 0
}

type MuteServerMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MuteServerMemberResp) Reset() {
	*x = MuteServerMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteServerMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteServerMemberResp) ProtoMessage() {}

func (x *MuteServerMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteServerMemberResp.ProtoReflect.Descriptor instead.
func (*MuteServerMemberResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{26}
}

type CancelMuteServerMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	UserID   string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *CancelMuteServerMemberReq) Reset() {
	*x = CancelMuteServerMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelMuteServerMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelMuteServerMemberReq) ProtoMessage() {}

func (x *CancelMuteServerMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelMuteServerMemberReq.ProtoReflect.Descriptor instead.
func (*CancelMuteServerMemberReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{27}
}

func (x *CancelMuteServerMemberReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *CancelMuteServerMemberReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CancelMuteServerMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelMuteServerMemberResp) Reset() {
	*x = CancelMuteServerMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelMuteServerMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelMuteServerMemberResp) ProtoMessage() {}

func (x *CancelMuteServerMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelMuteServerMemberResp.ProtoReflect.Descriptor instead.
func (*CancelMuteServerMemberResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{28}
}

type JoinServerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID      string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	ReqMessage    string `protobuf:"bytes,2,opt,name=reqMessage,proto3" json:"reqMessage,omitempty"`
	JoinSource    int32  `protobuf:"varint,3,opt,name=joinSource,proto3" json:"joinSource,omitempty"`
	UserID        string `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID,omitempty"`
	InviterUserID string `protobuf:"bytes,5,opt,name=inviterUserID,proto3" json:"inviterUserID,omitempty"`
}

func (x *JoinServerReq) Reset() {
	*x = JoinServerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinServerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinServerReq) ProtoMessage() {}

func (x *JoinServerReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinServerReq.ProtoReflect.Descriptor instead.
func (*JoinServerReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{29}
}

func (x *JoinServerReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *JoinServerReq) GetReqMessage() string {
	if x != nil {
		return x.ReqMessage
	}
	return ""
}

func (x *JoinServerReq) GetJoinSource() int32 {
	if x != nil {
		return x.JoinSource
	}
	return 0
}

func (x *JoinServerReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *JoinServerReq) GetInviterUserID() string {
	if x != nil {
		return x.InviterUserID
	}
	return ""
}

type JoinServerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JoinServerResp) Reset() {
	*x = JoinServerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinServerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinServerResp) ProtoMessage() {}

func (x *JoinServerResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinServerResp.ProtoReflect.Descriptor instead.
func (*JoinServerResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{30}
}

type QuitServerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	UserID   string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *QuitServerReq) Reset() {
	*x = QuitServerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitServerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitServerReq) ProtoMessage() {}

func (x *QuitServerReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitServerReq.ProtoReflect.Descriptor instead.
func (*QuitServerReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{31}
}

func (x *QuitServerReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *QuitServerReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type QuitServerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuitServerResp) Reset() {
	*x = QuitServerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitServerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitServerResp) ProtoMessage() {}

func (x *QuitServerResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitServerResp.ProtoReflect.Descriptor instead.
func (*QuitServerResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{32}
}

type SetServerMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID  string                  `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	UserID    string                  `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Nickname  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FaceURL   *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	RoleLevel *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=roleLevel,proto3" json:"roleLevel,omitempty"`
	Ex        *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=ex,proto3" json:"ex,omitempty"`
}

func (x *SetServerMemberInfo) Reset() {
	*x = SetServerMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetServerMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetServerMemberInfo) ProtoMessage() {}

func (x *SetServerMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetServerMemberInfo.ProtoReflect.Descriptor instead.
func (*SetServerMemberInfo) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{33}
}

func (x *SetServerMemberInfo) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *SetServerMemberInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SetServerMemberInfo) GetNickname() *wrapperspb.StringValue {
	if x != nil {
		return x.Nickname
	}
	return nil
}

func (x *SetServerMemberInfo) GetFaceURL() *wrapperspb.StringValue {
	if x != nil {
		return x.FaceURL
	}
	return nil
}

func (x *SetServerMemberInfo) GetRoleLevel() *wrapperspb.Int32Value {
	if x != nil {
		return x.RoleLevel
	}
	return nil
}

func (x *SetServerMemberInfo) GetEx() *wrapperspb.StringValue {
	if x != nil {
		return x.Ex
	}
	return nil
}

type SetServerMemberInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*SetServerMemberInfo `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *SetServerMemberInfoReq) Reset() {
	*x = SetServerMemberInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetServerMemberInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetServerMemberInfoReq) ProtoMessage() {}

func (x *SetServerMemberInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetServerMemberInfoReq.ProtoReflect.Descriptor instead.
func (*SetServerMemberInfoReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{34}
}

func (x *SetServerMemberInfoReq) GetMembers() []*SetServerMemberInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

type SetServerMemberInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetServerMemberInfoResp) Reset() {
	*x = SetServerMemberInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetServerMemberInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetServerMemberInfoResp) ProtoMessage() {}

func (x *SetServerMemberInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetServerMemberInfoResp.ProtoReflect.Descriptor instead.
func (*SetServerMemberInfoResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{35}
}

type GetServerMemberUserIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
}

func (x *GetServerMemberUserIDsReq) Reset() {
	*x = GetServerMemberUserIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerMemberUserIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerMemberUserIDsReq) ProtoMessage() {}

func (x *GetServerMemberUserIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerMemberUserIDsReq.ProtoReflect.Descriptor instead.
func (*GetServerMemberUserIDsReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{36}
}

func (x *GetServerMemberUserIDsReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

type GetServerMemberUserIDsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *GetServerMemberUserIDsResp) Reset() {
	*x = GetServerMemberUserIDsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerMemberUserIDsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerMemberUserIDsResp) ProtoMessage() {}

func (x *GetServerMemberUserIDsResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerMemberUserIDsResp.ProtoReflect.Descriptor instead.
func (*GetServerMemberUserIDsResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{37}
}

func (x *GetServerMemberUserIDsResp) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type GetUserInServerMembersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ServerIDs []string `protobuf:"bytes,2,rep,name=serverIDs,proto3" json:"serverIDs,omitempty"`
}

func (x *GetUserInServerMembersReq) Reset() {
	*x = GetUserInServerMembersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInServerMembersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInServerMembersReq) ProtoMessage() {}

func (x *GetUserInServerMembersReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInServerMembersReq.ProtoReflect.Descriptor instead.
func (*GetUserInServerMembersReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{38}
}

func (x *GetUserInServerMembersReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserInServerMembersReq) GetServerIDs() []string {
	if x != nil {
		return x.ServerIDs
	}
	return nil
}

type GetUserInServerMembersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*sdkws.ServerMemberFullInfo `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetUserInServerMembersResp) Reset() {
	*x = GetUserInServerMembersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInServerMembersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInServerMembersResp) ProtoMessage() {}

func (x *GetUserInServerMembersResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInServerMembersResp.ProtoReflect.Descriptor instead.
func (*GetUserInServerMembersResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{39}
}

func (x *GetUserInServerMembersResp) GetMembers() []*sdkws.ServerMemberFullInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

type GetServerMemberRoleLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID   string  `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	RoleLevels []int32 `protobuf:"varint,2,rep,packed,name=roleLevels,proto3" json:"roleLevels,omitempty"`
}

func (x *GetServerMemberRoleLevelReq) Reset() {
	*x = GetServerMemberRoleLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerMemberRoleLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerMemberRoleLevelReq) ProtoMessage() {}

func (x *GetServerMemberRoleLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerMemberRoleLevelReq.ProtoReflect.Descriptor instead.
func (*GetServerMemberRoleLevelReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{40}
}

func (x *GetServerMemberRoleLevelReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *GetServerMemberRoleLevelReq) GetRoleLevels() []int32 {
	if x != nil {
		return x.RoleLevels
	}
	return nil
}

type GetServerMemberRoleLevelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*sdkws.ServerMemberFullInfo `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetServerMemberRoleLevelResp) Reset() {
	*x = GetServerMemberRoleLevelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerMemberRoleLevelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerMemberRoleLevelResp) ProtoMessage() {}

func (x *GetServerMemberRoleLevelResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerMemberRoleLevelResp.ProtoReflect.Descriptor instead.
func (*GetServerMemberRoleLevelResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{41}
}

func (x *GetServerMemberRoleLevelResp) GetMembers() []*sdkws.ServerMemberFullInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

type GetServerMemberCacheReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID       string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	ServerMemberID string `protobuf:"bytes,2,opt,name=serverMemberID,proto3" json:"serverMemberID,omitempty"`
}

func (x *GetServerMemberCacheReq) Reset() {
	*x = GetServerMemberCacheReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerMemberCacheReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerMemberCacheReq) ProtoMessage() {}

func (x *GetServerMemberCacheReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerMemberCacheReq.ProtoReflect.Descriptor instead.
func (*GetServerMemberCacheReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{42}
}

func (x *GetServerMemberCacheReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *GetServerMemberCacheReq) GetServerMemberID() string {
	if x != nil {
		return x.ServerMemberID
	}
	return ""
}

type GetServerMemberCacheResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member *sdkws.ServerMemberFullInfo `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *GetServerMemberCacheResp) Reset() {
	*x = GetServerMemberCacheResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerMemberCacheResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerMemberCacheResp) ProtoMessage() {}

func (x *GetServerMemberCacheResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerMemberCacheResp.ProtoReflect.Descriptor instead.
func (*GetServerMemberCacheResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{43}
}

func (x *GetServerMemberCacheResp) GetMember() *sdkws.ServerMemberFullInfo {
	if x != nil {
		return x.Member
	}
	return nil
}

type TransferServerOwnerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID       string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	OldOwnerUserID string `protobuf:"bytes,2,opt,name=oldOwnerUserID,proto3" json:"oldOwnerUserID,omitempty"`
	NewOwnerUserID string `protobuf:"bytes,3,opt,name=newOwnerUserID,proto3" json:"newOwnerUserID,omitempty"`
}

func (x *TransferServerOwnerReq) Reset() {
	*x = TransferServerOwnerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferServerOwnerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferServerOwnerReq) ProtoMessage() {}

func (x *TransferServerOwnerReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferServerOwnerReq.ProtoReflect.Descriptor instead.
func (*TransferServerOwnerReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{44}
}

func (x *TransferServerOwnerReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *TransferServerOwnerReq) GetOldOwnerUserID() string {
	if x != nil {
		return x.OldOwnerUserID
	}
	return ""
}

func (x *TransferServerOwnerReq) GetNewOwnerUserID() string {
	if x != nil {
		return x.NewOwnerUserID
	}
	return ""
}

type TransferServerOwnerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferServerOwnerResp) Reset() {
	*x = TransferServerOwnerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferServerOwnerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferServerOwnerResp) ProtoMessage() {}

func (x *TransferServerOwnerResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferServerOwnerResp.ProtoReflect.Descriptor instead.
func (*TransferServerOwnerResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{45}
}

// group
type GetJoinedServerGroupListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *sdkws.RequestPagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	FromUserID string                   `protobuf:"bytes,2,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
}

func (x *GetJoinedServerGroupListReq) Reset() {
	*x = GetJoinedServerGroupListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJoinedServerGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJoinedServerGroupListReq) ProtoMessage() {}

func (x *GetJoinedServerGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJoinedServerGroupListReq.ProtoReflect.Descriptor instead.
func (*GetJoinedServerGroupListReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{46}
}

func (x *GetJoinedServerGroupListReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetJoinedServerGroupListReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

type GetJoinedServerGroupListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  uint32             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Groups []*sdkws.GroupInfo `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *GetJoinedServerGroupListResp) Reset() {
	*x = GetJoinedServerGroupListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJoinedServerGroupListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJoinedServerGroupListResp) ProtoMessage() {}

func (x *GetJoinedServerGroupListResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJoinedServerGroupListResp.ProtoReflect.Descriptor instead.
func (*GetJoinedServerGroupListResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{47}
}

func (x *GetJoinedServerGroupListResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetJoinedServerGroupListResp) GetGroups() []*sdkws.GroupInfo {
	if x != nil {
		return x.Groups
	}
	return nil
}

type CreateServerGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupInfo   *sdkws.GroupInfo `protobuf:"bytes,1,opt,name=groupInfo,proto3" json:"groupInfo,omitempty"`
	OwnerUserID string           `protobuf:"bytes,2,opt,name=ownerUserID,proto3" json:"ownerUserID,omitempty"` //owner
	DappID      string           `protobuf:"bytes,3,opt,name=dappID,proto3" json:"dappID,omitempty"`
}

func (x *CreateServerGroupReq) Reset() {
	*x = CreateServerGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServerGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerGroupReq) ProtoMessage() {}

func (x *CreateServerGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerGroupReq.ProtoReflect.Descriptor instead.
func (*CreateServerGroupReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{48}
}

func (x *CreateServerGroupReq) GetGroupInfo() *sdkws.GroupInfo {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

func (x *CreateServerGroupReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *CreateServerGroupReq) GetDappID() string {
	if x != nil {
		return x.DappID
	}
	return ""
}

type CreateServerGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupInfo *sdkws.GroupInfo `protobuf:"bytes,1,opt,name=groupInfo,proto3" json:"groupInfo,omitempty"`
}

func (x *CreateServerGroupResp) Reset() {
	*x = CreateServerGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServerGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerGroupResp) ProtoMessage() {}

func (x *CreateServerGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerGroupResp.ProtoReflect.Descriptor instead.
func (*CreateServerGroupResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{49}
}

func (x *CreateServerGroupResp) GetGroupInfo() *sdkws.GroupInfo {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

type ServerApplicationResponseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID     string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	FromUserID   string `protobuf:"bytes,2,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
	HandledMsg   string `protobuf:"bytes,3,opt,name=handledMsg,proto3" json:"handledMsg,omitempty"`
	HandleResult int32  `protobuf:"varint,4,opt,name=handleResult,proto3" json:"handleResult,omitempty"`
}

func (x *ServerApplicationResponseReq) Reset() {
	*x = ServerApplicationResponseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerApplicationResponseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerApplicationResponseReq) ProtoMessage() {}

func (x *ServerApplicationResponseReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerApplicationResponseReq.ProtoReflect.Descriptor instead.
func (*ServerApplicationResponseReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{50}
}

func (x *ServerApplicationResponseReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *ServerApplicationResponseReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *ServerApplicationResponseReq) GetHandledMsg() string {
	if x != nil {
		return x.HandledMsg
	}
	return ""
}

func (x *ServerApplicationResponseReq) GetHandleResult() int32 {
	if x != nil {
		return x.HandleResult
	}
	return 0
}

type ServerApplicationResponseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerApplicationResponseResp) Reset() {
	*x = ServerApplicationResponseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerApplicationResponseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerApplicationResponseResp) ProtoMessage() {}

func (x *ServerApplicationResponseResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerApplicationResponseResp.ProtoReflect.Descriptor instead.
func (*ServerApplicationResponseResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{51}
}

type GetServerApplicationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *sdkws.RequestPagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	FromUserID string                   `protobuf:"bytes,2,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"` //owner or admin
}

func (x *GetServerApplicationListReq) Reset() {
	*x = GetServerApplicationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerApplicationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerApplicationListReq) ProtoMessage() {}

func (x *GetServerApplicationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerApplicationListReq.ProtoReflect.Descriptor instead.
func (*GetServerApplicationListReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{52}
}

func (x *GetServerApplicationListReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetServerApplicationListReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

type GetServerApplicationListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total          uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	ServerRequests []*sdkws.ServerRequest `protobuf:"bytes,2,rep,name=serverRequests,proto3" json:"serverRequests,omitempty"`
}

func (x *GetServerApplicationListResp) Reset() {
	*x = GetServerApplicationListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerApplicationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerApplicationListResp) ProtoMessage() {}

func (x *GetServerApplicationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerApplicationListResp.ProtoReflect.Descriptor instead.
func (*GetServerApplicationListResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{53}
}

func (x *GetServerApplicationListResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetServerApplicationListResp) GetServerRequests() []*sdkws.ServerRequest {
	if x != nil {
		return x.ServerRequests
	}
	return nil
}

type GetUserReqApplicationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *sdkws.RequestPagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	UserID     string                   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetUserReqApplicationListReq) Reset() {
	*x = GetUserReqApplicationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserReqApplicationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserReqApplicationListReq) ProtoMessage() {}

func (x *GetUserReqApplicationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserReqApplicationListReq.ProtoReflect.Descriptor instead.
func (*GetUserReqApplicationListReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{54}
}

func (x *GetUserReqApplicationListReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetUserReqApplicationListReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetUserReqApplicationListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total          uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	ServerRequests []*sdkws.ServerRequest `protobuf:"bytes,2,rep,name=serverRequests,proto3" json:"serverRequests,omitempty"`
}

func (x *GetUserReqApplicationListResp) Reset() {
	*x = GetUserReqApplicationListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserReqApplicationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserReqApplicationListResp) ProtoMessage() {}

func (x *GetUserReqApplicationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserReqApplicationListResp.ProtoReflect.Descriptor instead.
func (*GetUserReqApplicationListResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{55}
}

func (x *GetUserReqApplicationListResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetUserReqApplicationListResp) GetServerRequests() []*sdkws.ServerRequest {
	if x != nil {
		return x.ServerRequests
	}
	return nil
}

type GetServerUsersReqApplicationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID string   `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	UserIDs  []string `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *GetServerUsersReqApplicationListReq) Reset() {
	*x = GetServerUsersReqApplicationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerUsersReqApplicationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerUsersReqApplicationListReq) ProtoMessage() {}

func (x *GetServerUsersReqApplicationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerUsersReqApplicationListReq.ProtoReflect.Descriptor instead.
func (*GetServerUsersReqApplicationListReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{56}
}

func (x *GetServerUsersReqApplicationListReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *GetServerUsersReqApplicationListReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type GetServerUsersReqApplicationListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total          int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	ServerRequests []*sdkws.ServerRequest `protobuf:"bytes,2,rep,name=serverRequests,proto3" json:"serverRequests,omitempty"`
}

func (x *GetServerUsersReqApplicationListResp) Reset() {
	*x = GetServerUsersReqApplicationListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerUsersReqApplicationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerUsersReqApplicationListResp) ProtoMessage() {}

func (x *GetServerUsersReqApplicationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerUsersReqApplicationListResp.ProtoReflect.Descriptor instead.
func (*GetServerUsersReqApplicationListResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{57}
}

func (x *GetServerUsersReqApplicationListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetServerUsersReqApplicationListResp) GetServerRequests() []*sdkws.ServerRequest {
	if x != nil {
		return x.ServerRequests
	}
	return nil
}

// ////////server_black////////////////
type BanServerMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID       string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	BlockUserID    string `protobuf:"bytes,2,opt,name=blockUserID,proto3" json:"blockUserID,omitempty"`
	OperatorUserID string `protobuf:"bytes,3,opt,name=operatorUserID,proto3" json:"operatorUserID,omitempty"`
	Ex             string `protobuf:"bytes,4,opt,name=ex,proto3" json:"ex,omitempty"`
}

func (x *BanServerMemberReq) Reset() {
	*x = BanServerMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanServerMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanServerMemberReq) ProtoMessage() {}

func (x *BanServerMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanServerMemberReq.ProtoReflect.Descriptor instead.
func (*BanServerMemberReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{58}
}

func (x *BanServerMemberReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *BanServerMemberReq) GetBlockUserID() string {
	if x != nil {
		return x.BlockUserID
	}
	return ""
}

func (x *BanServerMemberReq) GetOperatorUserID() string {
	if x != nil {
		return x.OperatorUserID
	}
	return ""
}

func (x *BanServerMemberReq) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type BanServerMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Black *sdkws.ServerBlackFullInfo `protobuf:"bytes,1,opt,name=black,proto3" json:"black,omitempty"`
}

func (x *BanServerMemberResp) Reset() {
	*x = BanServerMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanServerMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanServerMemberResp) ProtoMessage() {}

func (x *BanServerMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanServerMemberResp.ProtoReflect.Descriptor instead.
func (*BanServerMemberResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{59}
}

func (x *BanServerMemberResp) GetBlack() *sdkws.ServerBlackFullInfo {
	if x != nil {
		return x.Black
	}
	return nil
}

type CancelBanServerMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID       string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	BlockUserID    string `protobuf:"bytes,2,opt,name=blockUserID,proto3" json:"blockUserID,omitempty"`
	OperatorUserID string `protobuf:"bytes,3,opt,name=operatorUserID,proto3" json:"operatorUserID,omitempty"`
	Ex             string `protobuf:"bytes,4,opt,name=ex,proto3" json:"ex,omitempty"`
}

func (x *CancelBanServerMemberReq) Reset() {
	*x = CancelBanServerMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBanServerMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBanServerMemberReq) ProtoMessage() {}

func (x *CancelBanServerMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBanServerMemberReq.ProtoReflect.Descriptor instead.
func (*CancelBanServerMemberReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{60}
}

func (x *CancelBanServerMemberReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *CancelBanServerMemberReq) GetBlockUserID() string {
	if x != nil {
		return x.BlockUserID
	}
	return ""
}

func (x *CancelBanServerMemberReq) GetOperatorUserID() string {
	if x != nil {
		return x.OperatorUserID
	}
	return ""
}

func (x *CancelBanServerMemberReq) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type CancelBanServerMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelBanServerMemberResp) Reset() {
	*x = CancelBanServerMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBanServerMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBanServerMemberResp) ProtoMessage() {}

func (x *CancelBanServerMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBanServerMemberResp.ProtoReflect.Descriptor instead.
func (*CancelBanServerMemberResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{61}
}

type GetServerBlackListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
}

func (x *GetServerBlackListReq) Reset() {
	*x = GetServerBlackListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerBlackListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerBlackListReq) ProtoMessage() {}

func (x *GetServerBlackListReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerBlackListReq.ProtoReflect.Descriptor instead.
func (*GetServerBlackListReq) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{62}
}

func (x *GetServerBlackListReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

type GetServerBlackListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blacks []*sdkws.ServerBlackFullInfo `protobuf:"bytes,1,rep,name=blacks,proto3" json:"blacks,omitempty"`
}

func (x *GetServerBlackListResp) Reset() {
	*x = GetServerBlackListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_club_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerBlackListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerBlackListResp) ProtoMessage() {}

func (x *GetServerBlackListResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_club_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerBlackListResp.ProtoReflect.Descriptor instead.
func (*GetServerBlackListResp) Descriptor() ([]byte, []int) {
	return file_club_club_proto_rawDescGZIP(), []int{63}
}

func (x *GetServerBlackListResp) GetBlacks() []*sdkws.ServerBlackFullInfo {
	if x != nil {
		return x.Blacks
	}
	return nil
}

var File_club_club_proto protoreflect.FileDescriptor

var file_club_club_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x62, 0x2f, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x63, 0x6c, 0x75, 0x62, 0x1a, 0x11, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2f, 0x73, 0x64, 0x6b, 0x77,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x70, 0x62, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x02, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x75, 0x73, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e,
	0x0a, 0x02, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x22, 0x2e,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7a,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x62, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77,
	0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x1d,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x5c, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64,
	0x6b, 0x77, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x31, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x54,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x35, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x12, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x52, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x64, 0x0a,
	0x10, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x50, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46,
	0x6f, 0x72, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x53, 0x65,
	0x74, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72,
	0x53, 0x65, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x73,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x42, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x22, 0x4f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x73, 0x22, 0x5e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x42, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x22, 0x6f, 0x0a, 0x13, 0x4b, 0x69, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x4b, 0x69, 0x63, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7f, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x69,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x38, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x4d,
	0x53, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x4d, 0x53, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x6d, 0x0a, 0x13, 0x4d, 0x75, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x75, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x4d, 0x75, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x4f, 0x0a, 0x19, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa9,
	0x01, 0x0a, 0x0d, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6a, 0x6f, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x10, 0x0a, 0x0e, 0x4a, 0x6f,
	0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x43, 0x0a, 0x0d,
	0x51, 0x75, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x10, 0x0a, 0x0e, 0x51, 0x75, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xbc, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x3e, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x3f, 0x0a,
	0x09, 0x72, 0x6f, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32,
	0x0a, 0x02, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x65, 0x78, 0x22, 0x5a, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75,
	0x62, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x19,
	0x0a, 0x17, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x37, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x36, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x51, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x60, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x75,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22,
	0x59, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f,
	0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a,
	0x72, 0x6f, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0x62, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x75, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x5d,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x22, 0x5c, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x16,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65,
	0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x19, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x84, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b,
	0x77, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x22, 0x54, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b,
	0x77, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x4d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x84, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b,
	0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x7f, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64,
	0x6b, 0x77, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x22, 0x7d, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x80, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0x5b, 0x0a, 0x23, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x22, 0x87, 0x01, 0x0a, 0x24, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x49, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x42,
	0x61, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x22, 0x54, 0x0a, 0x13, 0x42, 0x61, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d,
	0x0a, 0x05, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b,
	0x77, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x46, 0x75,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x22, 0x90, 0x01,
	0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78,
	0x22, 0x1b, 0x0a, 0x19, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x33, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x59, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x06,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x46, 0x75, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x32, 0xf4, 0x19,
	0x0a, 0x04, 0x63, 0x6c, 0x75, 0x62, 0x12, 0x57, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x7b, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x0e,
	0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c,
	0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0a, 0x6a,
	0x6f, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51,
	0x0a, 0x0a, 0x71, 0x75, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62,
	0x2e, 0x51, 0x75, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c,
	0x75, 0x62, 0x2e, 0x51, 0x75, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x5a, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x23, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a,
	0x0d, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c,
	0x75, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x13, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x29, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7e, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7b, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x7e, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2f, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x30, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x93, 0x01, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x67, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x37, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7b, 0x0a, 0x18, 0x67, 0x65,
	0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x6c, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x2a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6f, 0x0a,
	0x14, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x1a, 0x2b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63,
	0x0a, 0x10, 0x6b, 0x69, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x26, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x4b,
	0x69, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x6c, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x4d, 0x53, 0x12, 0x29, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x4d, 0x53,
	0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x4d, 0x53, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x63, 0x0a, 0x10, 0x6d, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e,
	0x4d, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x16, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c,
	0x75, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x13, 0x73,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x29, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75,
	0x62, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x16, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x2c, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x75, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x2c, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x6f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x2a, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x42, 0x61, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75,
	0x62, 0x2e, 0x42, 0x61, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x72, 0x0a, 0x15, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42,
	0x61, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c,
	0x75, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x12, 0x67, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x28, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x44, 0x4b, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6c, 0x75, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_club_club_proto_rawDescOnce sync.Once
	file_club_club_proto_rawDescData = file_club_club_proto_rawDesc
)

func file_club_club_proto_rawDescGZIP() []byte {
	file_club_club_proto_rawDescOnce.Do(func() {
		file_club_club_proto_rawDescData = protoimpl.X.CompressGZIP(file_club_club_proto_rawDescData)
	})
	return file_club_club_proto_rawDescData
}

var file_club_club_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_club_club_proto_goTypes = []interface{}{
	(*CreateServerReq)(nil),                      // 0: OpenIMServer.club.CreateServerReq
	(*CreateServerResp)(nil),                     // 1: OpenIMServer.club.CreateServerResp
	(*CreateGroupCategoryReq)(nil),               // 2: OpenIMServer.club.CreateGroupCategoryReq
	(*CreateGroupCategoryResp)(nil),              // 3: OpenIMServer.club.CreateGroupCategoryResp
	(*GetServerRecommendedListReq)(nil),          // 4: OpenIMServer.club.GetServerRecommendedListReq
	(*GetServerRecommendecListResp)(nil),         // 5: OpenIMServer.club.GetServerRecommendecListResp
	(*GetServersInfoReq)(nil),                    // 6: OpenIMServer.club.GetServersInfoReq
	(*GetServersInfoResp)(nil),                   // 7: OpenIMServer.club.GetServersInfoResp
	(*GetServerInfoResp)(nil),                    // 8: OpenIMServer.club.GetServerInfoResp
	(*DeleteServerReq)(nil),                      // 9: OpenIMServer.club.DeleteServerReq
	(*DeleteServerResp)(nil),                     // 10: OpenIMServer.club.DeleteServerResp
	(*DismissServerReq)(nil),                     // 11: OpenIMServer.club.DismissServerReq
	(*DismissServerResp)(nil),                    // 12: OpenIMServer.club.DismissServerResp
	(*SetServerInfoReq)(nil),                     // 13: OpenIMServer.club.SetServerInfoReq
	(*SetServerInfoResp)(nil),                    // 14: OpenIMServer.club.SetServerInfoResp
	(*GetServerMemberListReq)(nil),               // 15: OpenIMServer.club.GetServerMemberListReq
	(*GetServerMemberListResp)(nil),              // 16: OpenIMServer.club.GetServerMemberListResp
	(*GetServerMembersInfoReq)(nil),              // 17: OpenIMServer.club.GetServerMembersInfoReq
	(*GetServerMembersInfoResp)(nil),             // 18: OpenIMServer.club.GetServerMembersInfoResp
	(*KickServerMemberReq)(nil),                  // 19: OpenIMServer.club.KickServerMemberReq
	(*KickServerMemberResp)(nil),                 // 20: OpenIMServer.club.KickServerMemberResp
	(*GetJoinedServerListReq)(nil),               // 21: OpenIMServer.club.GetJoinedServerListReq
	(*GetJoinedServerListResp)(nil),              // 22: OpenIMServer.club.GetJoinedServerListResp
	(*GetServerMembersCMSReq)(nil),               // 23: OpenIMServer.club.GetServerMembersCMSReq
	(*GetServerMembersCMSResp)(nil),              // 24: OpenIMServer.club.GetServerMembersCMSResp
	(*MuteServerMemberReq)(nil),                  // 25: OpenIMServer.club.MuteServerMemberReq
	(*MuteServerMemberResp)(nil),                 // 26: OpenIMServer.club.MuteServerMemberResp
	(*CancelMuteServerMemberReq)(nil),            // 27: OpenIMServer.club.CancelMuteServerMemberReq
	(*CancelMuteServerMemberResp)(nil),           // 28: OpenIMServer.club.CancelMuteServerMemberResp
	(*JoinServerReq)(nil),                        // 29: OpenIMServer.club.JoinServerReq
	(*JoinServerResp)(nil),                       // 30: OpenIMServer.club.JoinServerResp
	(*QuitServerReq)(nil),                        // 31: OpenIMServer.club.QuitServerReq
	(*QuitServerResp)(nil),                       // 32: OpenIMServer.club.QuitServerResp
	(*SetServerMemberInfo)(nil),                  // 33: OpenIMServer.club.SetServerMemberInfo
	(*SetServerMemberInfoReq)(nil),               // 34: OpenIMServer.club.SetServerMemberInfoReq
	(*SetServerMemberInfoResp)(nil),              // 35: OpenIMServer.club.SetServerMemberInfoResp
	(*GetServerMemberUserIDsReq)(nil),            // 36: OpenIMServer.club.GetServerMemberUserIDsReq
	(*GetServerMemberUserIDsResp)(nil),           // 37: OpenIMServer.club.GetServerMemberUserIDsResp
	(*GetUserInServerMembersReq)(nil),            // 38: OpenIMServer.club.GetUserInServerMembersReq
	(*GetUserInServerMembersResp)(nil),           // 39: OpenIMServer.club.GetUserInServerMembersResp
	(*GetServerMemberRoleLevelReq)(nil),          // 40: OpenIMServer.club.GetServerMemberRoleLevelReq
	(*GetServerMemberRoleLevelResp)(nil),         // 41: OpenIMServer.club.GetServerMemberRoleLevelResp
	(*GetServerMemberCacheReq)(nil),              // 42: OpenIMServer.club.GetServerMemberCacheReq
	(*GetServerMemberCacheResp)(nil),             // 43: OpenIMServer.club.GetServerMemberCacheResp
	(*TransferServerOwnerReq)(nil),               // 44: OpenIMServer.club.TransferServerOwnerReq
	(*TransferServerOwnerResp)(nil),              // 45: OpenIMServer.club.TransferServerOwnerResp
	(*GetJoinedServerGroupListReq)(nil),          // 46: OpenIMServer.club.GetJoinedServerGroupListReq
	(*GetJoinedServerGroupListResp)(nil),         // 47: OpenIMServer.club.GetJoinedServerGroupListResp
	(*CreateServerGroupReq)(nil),                 // 48: OpenIMServer.club.CreateServerGroupReq
	(*CreateServerGroupResp)(nil),                // 49: OpenIMServer.club.CreateServerGroupResp
	(*ServerApplicationResponseReq)(nil),         // 50: OpenIMServer.club.ServerApplicationResponseReq
	(*ServerApplicationResponseResp)(nil),        // 51: OpenIMServer.club.ServerApplicationResponseResp
	(*GetServerApplicationListReq)(nil),          // 52: OpenIMServer.club.GetServerApplicationListReq
	(*GetServerApplicationListResp)(nil),         // 53: OpenIMServer.club.GetServerApplicationListResp
	(*GetUserReqApplicationListReq)(nil),         // 54: OpenIMServer.club.GetUserReqApplicationListReq
	(*GetUserReqApplicationListResp)(nil),        // 55: OpenIMServer.club.GetUserReqApplicationListResp
	(*GetServerUsersReqApplicationListReq)(nil),  // 56: OpenIMServer.club.getServerUsersReqApplicationListReq
	(*GetServerUsersReqApplicationListResp)(nil), // 57: OpenIMServer.club.getServerUsersReqApplicationListResp
	(*BanServerMemberReq)(nil),                   // 58: OpenIMServer.club.BanServerMemberReq
	(*BanServerMemberResp)(nil),                  // 59: OpenIMServer.club.BanServerMemberResp
	(*CancelBanServerMemberReq)(nil),             // 60: OpenIMServer.club.CancelBanServerMemberReq
	(*CancelBanServerMemberResp)(nil),            // 61: OpenIMServer.club.CancelBanServerMemberResp
	(*GetServerBlackListReq)(nil),                // 62: OpenIMServer.club.GetServerBlackListReq
	(*GetServerBlackListResp)(nil),               // 63: OpenIMServer.club.GetServerBlackListResp
	(*sdkws.GroupCategory)(nil),                  // 64: OpenIMServer.sdkws.GroupCategory
	(*sdkws.ServerFullInfo)(nil),                 // 65: OpenIMServer.sdkws.ServerFullInfo
	(*sdkws.ServerInfo)(nil),                     // 66: OpenIMServer.sdkws.ServerInfo
	(*sdkws.GroupCategoryListInfo)(nil),          // 67: OpenIMServer.sdkws.GroupCategoryListInfo
	(*sdkws.ServerInfoForSet)(nil),               // 68: OpenIMServer.sdkws.ServerInfoForSet
	(*sdkws.RequestPagination)(nil),              // 69: OpenIMServer.sdkws.RequestPagination
	(*sdkws.ServerMemberFullInfo)(nil),           // 70: OpenIMServer.sdkws.ServerMemberFullInfo
	(*wrapperspb.StringValue)(nil),               // 71: OpenIMServer.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),                // 72: OpenIMServer.protobuf.Int32Value
	(*sdkws.GroupInfo)(nil),                      // 73: OpenIMServer.sdkws.GroupInfo
	(*sdkws.ServerRequest)(nil),                  // 74: OpenIMServer.sdkws.ServerRequest
	(*sdkws.ServerBlackFullInfo)(nil),            // 75: OpenIMServer.sdkws.ServerBlackFullInfo
}
var file_club_club_proto_depIdxs = []int32{
	64, // 0: OpenIMServer.club.CreateGroupCategoryResp.groupCategory:type_name -> OpenIMServer.sdkws.GroupCategory
	65, // 1: OpenIMServer.club.GetServerRecommendecListResp.servers:type_name -> OpenIMServer.sdkws.ServerFullInfo
	8,  // 2: OpenIMServer.club.GetServersInfoResp.servers:type_name -> OpenIMServer.club.GetServerInfoResp
	66, // 3: OpenIMServer.club.GetServerInfoResp.server:type_name -> OpenIMServer.sdkws.ServerInfo
	67, // 4: OpenIMServer.club.GetServerInfoResp.categoryList:type_name -> OpenIMServer.sdkws.GroupCategoryListInfo
	68, // 5: OpenIMServer.club.SetServerInfoReq.serverInfoForSet:type_name -> OpenIMServer.sdkws.ServerInfoForSet
	69, // 6: OpenIMServer.club.GetServerMemberListReq.pagination:type_name -> OpenIMServer.sdkws.RequestPagination
	70, // 7: OpenIMServer.club.GetServerMemberListResp.members:type_name -> OpenIMServer.sdkws.ServerMemberFullInfo
	70, // 8: OpenIMServer.club.GetServerMembersInfoResp.members:type_name -> OpenIMServer.sdkws.ServerMemberFullInfo
	69, // 9: OpenIMServer.club.GetJoinedServerListReq.pagination:type_name -> OpenIMServer.sdkws.RequestPagination
	66, // 10: OpenIMServer.club.GetJoinedServerListResp.servers:type_name -> OpenIMServer.sdkws.ServerInfo
	69, // 11: OpenIMServer.club.GetServerMembersCMSReq.pagination:type_name -> OpenIMServer.sdkws.RequestPagination
	70, // 12: OpenIMServer.club.GetServerMembersCMSResp.members:type_name -> OpenIMServer.sdkws.ServerMemberFullInfo
	71, // 13: OpenIMServer.club.SetServerMemberInfo.nickname:type_name -> OpenIMServer.protobuf.StringValue
	71, // 14: OpenIMServer.club.SetServerMemberInfo.faceURL:type_name -> OpenIMServer.protobuf.StringValue
	72, // 15: OpenIMServer.club.SetServerMemberInfo.roleLevel:type_name -> OpenIMServer.protobuf.Int32Value
	71, // 16: OpenIMServer.club.SetServerMemberInfo.ex:type_name -> OpenIMServer.protobuf.StringValue
	33, // 17: OpenIMServer.club.SetServerMemberInfoReq.members:type_name -> OpenIMServer.club.SetServerMemberInfo
	70, // 18: OpenIMServer.club.GetUserInServerMembersResp.members:type_name -> OpenIMServer.sdkws.ServerMemberFullInfo
	70, // 19: OpenIMServer.club.GetServerMemberRoleLevelResp.members:type_name -> OpenIMServer.sdkws.ServerMemberFullInfo
	70, // 20: OpenIMServer.club.GetServerMemberCacheResp.member:type_name -> OpenIMServer.sdkws.ServerMemberFullInfo
	69, // 21: OpenIMServer.club.GetJoinedServerGroupListReq.pagination:type_name -> OpenIMServer.sdkws.RequestPagination
	73, // 22: OpenIMServer.club.GetJoinedServerGroupListResp.groups:type_name -> OpenIMServer.sdkws.GroupInfo
	73, // 23: OpenIMServer.club.CreateServerGroupReq.groupInfo:type_name -> OpenIMServer.sdkws.GroupInfo
	73, // 24: OpenIMServer.club.CreateServerGroupResp.groupInfo:type_name -> OpenIMServer.sdkws.GroupInfo
	69, // 25: OpenIMServer.club.GetServerApplicationListReq.pagination:type_name -> OpenIMServer.sdkws.RequestPagination
	74, // 26: OpenIMServer.club.GetServerApplicationListResp.serverRequests:type_name -> OpenIMServer.sdkws.ServerRequest
	69, // 27: OpenIMServer.club.GetUserReqApplicationListReq.pagination:type_name -> OpenIMServer.sdkws.RequestPagination
	74, // 28: OpenIMServer.club.GetUserReqApplicationListResp.serverRequests:type_name -> OpenIMServer.sdkws.ServerRequest
	74, // 29: OpenIMServer.club.getServerUsersReqApplicationListResp.serverRequests:type_name -> OpenIMServer.sdkws.ServerRequest
	75, // 30: OpenIMServer.club.BanServerMemberResp.black:type_name -> OpenIMServer.sdkws.ServerBlackFullInfo
	75, // 31: OpenIMServer.club.GetServerBlackListResp.blacks:type_name -> OpenIMServer.sdkws.ServerBlackFullInfo
	0,  // 32: OpenIMServer.club.club.createServer:input_type -> OpenIMServer.club.CreateServerReq
	4,  // 33: OpenIMServer.club.club.getServerRecommendedList:input_type -> OpenIMServer.club.GetServerRecommendedListReq
	6,  // 34: OpenIMServer.club.club.getServersInfo:input_type -> OpenIMServer.club.GetServersInfoReq
	29, // 35: OpenIMServer.club.club.joinServer:input_type -> OpenIMServer.club.JoinServerReq
	31, // 36: OpenIMServer.club.club.quitServer:input_type -> OpenIMServer.club.QuitServerReq
	11, // 37: OpenIMServer.club.club.dismissServer:input_type -> OpenIMServer.club.DismissServerReq
	13, // 38: OpenIMServer.club.club.setServerInfo:input_type -> OpenIMServer.club.SetServerInfoReq
	2,  // 39: OpenIMServer.club.club.createGroupCategory:input_type -> OpenIMServer.club.CreateGroupCategoryReq
	50, // 40: OpenIMServer.club.club.serverApplicationResponse:input_type -> OpenIMServer.club.ServerApplicationResponseReq
	52, // 41: OpenIMServer.club.club.getServerApplicationList:input_type -> OpenIMServer.club.GetServerApplicationListReq
	54, // 42: OpenIMServer.club.club.getUserReqApplicationList:input_type -> OpenIMServer.club.GetUserReqApplicationListReq
	56, // 43: OpenIMServer.club.club.getServerUsersReqApplicationList:input_type -> OpenIMServer.club.getServerUsersReqApplicationListReq
	46, // 44: OpenIMServer.club.club.getJoinedServerGroupList:input_type -> OpenIMServer.club.GetJoinedServerGroupListReq
	48, // 45: OpenIMServer.club.club.createServerGroup:input_type -> OpenIMServer.club.CreateServerGroupReq
	15, // 46: OpenIMServer.club.club.getServerMemberList:input_type -> OpenIMServer.club.GetServerMemberListReq
	17, // 47: OpenIMServer.club.club.getServerMembersInfo:input_type -> OpenIMServer.club.GetServerMembersInfoReq
	19, // 48: OpenIMServer.club.club.kickServerMember:input_type -> OpenIMServer.club.KickServerMemberReq
	21, // 49: OpenIMServer.club.club.getJoinedServerList:input_type -> OpenIMServer.club.GetJoinedServerListReq
	23, // 50: OpenIMServer.club.club.getServerMembersCMS:input_type -> OpenIMServer.club.GetServerMembersCMSReq
	25, // 51: OpenIMServer.club.club.muteServerMember:input_type -> OpenIMServer.club.MuteServerMemberReq
	27, // 52: OpenIMServer.club.club.cancelMuteServerMember:input_type -> OpenIMServer.club.CancelMuteServerMemberReq
	34, // 53: OpenIMServer.club.club.setServerMemberInfo:input_type -> OpenIMServer.club.SetServerMemberInfoReq
	38, // 54: OpenIMServer.club.club.getUserInServerMembers:input_type -> OpenIMServer.club.GetUserInServerMembersReq
	36, // 55: OpenIMServer.club.club.getServerMemberUserIDs:input_type -> OpenIMServer.club.GetServerMemberUserIDsReq
	40, // 56: OpenIMServer.club.club.GetServerMemberRoleLevel:input_type -> OpenIMServer.club.GetServerMemberRoleLevelReq
	42, // 57: OpenIMServer.club.club.GetServerMemberCache:input_type -> OpenIMServer.club.GetServerMemberCacheReq
	44, // 58: OpenIMServer.club.club.transferServerOwner:input_type -> OpenIMServer.club.TransferServerOwnerReq
	58, // 59: OpenIMServer.club.club.banServerMember:input_type -> OpenIMServer.club.BanServerMemberReq
	60, // 60: OpenIMServer.club.club.cancelBanServerMember:input_type -> OpenIMServer.club.CancelBanServerMemberReq
	62, // 61: OpenIMServer.club.club.getServerBlackList:input_type -> OpenIMServer.club.GetServerBlackListReq
	1,  // 62: OpenIMServer.club.club.createServer:output_type -> OpenIMServer.club.CreateServerResp
	5,  // 63: OpenIMServer.club.club.getServerRecommendedList:output_type -> OpenIMServer.club.GetServerRecommendecListResp
	7,  // 64: OpenIMServer.club.club.getServersInfo:output_type -> OpenIMServer.club.GetServersInfoResp
	30, // 65: OpenIMServer.club.club.joinServer:output_type -> OpenIMServer.club.JoinServerResp
	32, // 66: OpenIMServer.club.club.quitServer:output_type -> OpenIMServer.club.QuitServerResp
	12, // 67: OpenIMServer.club.club.dismissServer:output_type -> OpenIMServer.club.DismissServerResp
	14, // 68: OpenIMServer.club.club.setServerInfo:output_type -> OpenIMServer.club.SetServerInfoResp
	3,  // 69: OpenIMServer.club.club.createGroupCategory:output_type -> OpenIMServer.club.CreateGroupCategoryResp
	51, // 70: OpenIMServer.club.club.serverApplicationResponse:output_type -> OpenIMServer.club.ServerApplicationResponseResp
	53, // 71: OpenIMServer.club.club.getServerApplicationList:output_type -> OpenIMServer.club.GetServerApplicationListResp
	55, // 72: OpenIMServer.club.club.getUserReqApplicationList:output_type -> OpenIMServer.club.GetUserReqApplicationListResp
	57, // 73: OpenIMServer.club.club.getServerUsersReqApplicationList:output_type -> OpenIMServer.club.getServerUsersReqApplicationListResp
	47, // 74: OpenIMServer.club.club.getJoinedServerGroupList:output_type -> OpenIMServer.club.GetJoinedServerGroupListResp
	49, // 75: OpenIMServer.club.club.createServerGroup:output_type -> OpenIMServer.club.CreateServerGroupResp
	16, // 76: OpenIMServer.club.club.getServerMemberList:output_type -> OpenIMServer.club.GetServerMemberListResp
	18, // 77: OpenIMServer.club.club.getServerMembersInfo:output_type -> OpenIMServer.club.GetServerMembersInfoResp
	20, // 78: OpenIMServer.club.club.kickServerMember:output_type -> OpenIMServer.club.KickServerMemberResp
	22, // 79: OpenIMServer.club.club.getJoinedServerList:output_type -> OpenIMServer.club.GetJoinedServerListResp
	24, // 80: OpenIMServer.club.club.getServerMembersCMS:output_type -> OpenIMServer.club.GetServerMembersCMSResp
	26, // 81: OpenIMServer.club.club.muteServerMember:output_type -> OpenIMServer.club.MuteServerMemberResp
	28, // 82: OpenIMServer.club.club.cancelMuteServerMember:output_type -> OpenIMServer.club.CancelMuteServerMemberResp
	35, // 83: OpenIMServer.club.club.setServerMemberInfo:output_type -> OpenIMServer.club.SetServerMemberInfoResp
	39, // 84: OpenIMServer.club.club.getUserInServerMembers:output_type -> OpenIMServer.club.GetUserInServerMembersResp
	37, // 85: OpenIMServer.club.club.getServerMemberUserIDs:output_type -> OpenIMServer.club.GetServerMemberUserIDsResp
	41, // 86: OpenIMServer.club.club.GetServerMemberRoleLevel:output_type -> OpenIMServer.club.GetServerMemberRoleLevelResp
	43, // 87: OpenIMServer.club.club.GetServerMemberCache:output_type -> OpenIMServer.club.GetServerMemberCacheResp
	45, // 88: OpenIMServer.club.club.transferServerOwner:output_type -> OpenIMServer.club.TransferServerOwnerResp
	59, // 89: OpenIMServer.club.club.banServerMember:output_type -> OpenIMServer.club.BanServerMemberResp
	61, // 90: OpenIMServer.club.club.cancelBanServerMember:output_type -> OpenIMServer.club.CancelBanServerMemberResp
	63, // 91: OpenIMServer.club.club.getServerBlackList:output_type -> OpenIMServer.club.GetServerBlackListResp
	62, // [62:92] is the sub-list for method output_type
	32, // [32:62] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_club_club_proto_init() }
func file_club_club_proto_init() {
	if File_club_club_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_club_club_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerRecommendedListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerRecommendecListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServersInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServersInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DismissServerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DismissServerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetServerInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetServerInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerMemberListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerMemberListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerMembersInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerMembersInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickServerMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickServerMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJoinedServerListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJoinedServerListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerMembersCMSReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerMembersCMSResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteServerMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteServerMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelMuteServerMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelMuteServerMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinServerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinServerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitServerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitServerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetServerMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetServerMemberInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetServerMemberInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerMemberUserIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerMemberUserIDsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInServerMembersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInServerMembersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerMemberRoleLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerMemberRoleLevelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerMemberCacheReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerMemberCacheResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferServerOwnerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferServerOwnerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJoinedServerGroupListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJoinedServerGroupListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServerGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServerGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerApplicationResponseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerApplicationResponseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerApplicationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerApplicationListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserReqApplicationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserReqApplicationListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerUsersReqApplicationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerUsersReqApplicationListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanServerMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanServerMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBanServerMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBanServerMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerBlackListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_club_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerBlackListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_club_club_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_club_club_proto_goTypes,
		DependencyIndexes: file_club_club_proto_depIdxs,
		MessageInfos:      file_club_club_proto_msgTypes,
	}.Build()
	File_club_club_proto = out.File
	file_club_club_proto_rawDesc = nil
	file_club_club_proto_goTypes = nil
	file_club_club_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClubClient is the client API for Club service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClubClient interface {
	// åå»ºé¨è½
	CreateServer(ctx context.Context, in *CreateServerReq, opts ...grpc.CallOption) (*CreateServerResp, error)
	// è·åé¨è½åè¡¨
	GetServerRecommendedList(ctx context.Context, in *GetServerRecommendedListReq, opts ...grpc.CallOption) (*GetServerRecommendecListResp, error)
	// è·åé¨è½è¯¦æ
	GetServersInfo(ctx context.Context, in *GetServersInfoReq, opts ...grpc.CallOption) (*GetServersInfoResp, error)
	// å å¥é¨è½
	JoinServer(ctx context.Context, in *JoinServerReq, opts ...grpc.CallOption) (*JoinServerResp, error)
	// éåºé¨è½
	QuitServer(ctx context.Context, in *QuitServerReq, opts ...grpc.CallOption) (*QuitServerResp, error)
	// è§£æ£é¨è½
	DismissServer(ctx context.Context, in *DismissServerReq, opts ...grpc.CallOption) (*DismissServerResp, error)
	// è®¾ç½®é¨è½ä¿¡æ¯
	SetServerInfo(ctx context.Context, in *SetServerInfoReq, opts ...grpc.CallOption) (*SetServerInfoResp, error)
	// åå»ºåç»
	CreateGroupCategory(ctx context.Context, in *CreateGroupCategoryReq, opts ...grpc.CallOption) (*CreateGroupCategoryResp, error)
	// é¨è½ä¸»æç®¡çåå¤çè¿é¨è½ç³è¯·
	ServerApplicationResponse(ctx context.Context, in *ServerApplicationResponseReq, opts ...grpc.CallOption) (*ServerApplicationResponseResp, error)
	// ï¼ä»¥ç®¡çåæç¾¤ä¸»èº«ä»½ï¼è·åç¾¤çå é¨è½ç³è¯·
	GetServerApplicationList(ctx context.Context, in *GetServerApplicationListReq, opts ...grpc.CallOption) (*GetServerApplicationListResp, error)
	// è·åç¨æ·èªå·±çä¸»å¨å é¨è½ç³è¯·
	GetUserReqApplicationList(ctx context.Context, in *GetUserReqApplicationListReq, opts ...grpc.CallOption) (*GetUserReqApplicationListResp, error)
	// è·åè¯¥é¨è½ç¨æ·çå é¨è½ç³è¯·
	GetServerUsersReqApplicationList(ctx context.Context, in *GetServerUsersReqApplicationListReq, opts ...grpc.CallOption) (*GetServerUsersReqApplicationListResp, error)
	// è·åæä¸ªäººå·²å å¥ç¾¤
	GetJoinedServerGroupList(ctx context.Context, in *GetJoinedServerGroupListReq, opts ...grpc.CallOption) (*GetJoinedServerGroupListResp, error)
	// åå»ºé¨è½æ¿é´
	CreateServerGroup(ctx context.Context, in *CreateServerGroupReq, opts ...grpc.CallOption) (*CreateServerGroupResp, error)
	// è·åæä¸ªé¨è½çé¨è½æå
	GetServerMemberList(ctx context.Context, in *GetServerMemberListReq, opts ...grpc.CallOption) (*GetServerMemberListResp, error)
	// è·åæä¸ªé¨è½çæå®é¨è½æå
	GetServerMembersInfo(ctx context.Context, in *GetServerMembersInfoReq, opts ...grpc.CallOption) (*GetServerMembersInfoResp, error)
	// è¸¢åºé¨è½
	KickServerMember(ctx context.Context, in *KickServerMemberReq, opts ...grpc.CallOption) (*KickServerMemberResp, error)
	// è·åæä¸ªäººå·²å å¥é¨è½
	GetJoinedServerList(ctx context.Context, in *GetJoinedServerListReq, opts ...grpc.CallOption) (*GetJoinedServerListResp, error)
	GetServerMembersCMS(ctx context.Context, in *GetServerMembersCMSReq, opts ...grpc.CallOption) (*GetServerMembersCMSResp, error)
	// å¯¹æä¸ªé¨è½æåç¦è¨
	MuteServerMember(ctx context.Context, in *MuteServerMemberReq, opts ...grpc.CallOption) (*MuteServerMemberResp, error)
	// å¯¹æä¸ªé¨è½æååæ¶ç¦è¨
	CancelMuteServerMember(ctx context.Context, in *CancelMuteServerMemberReq, opts ...grpc.CallOption) (*CancelMuteServerMemberResp, error)
	// è®¾ç½®é¨è½æåä¿¡æ¯
	SetServerMemberInfo(ctx context.Context, in *SetServerMemberInfoReq, opts ...grpc.CallOption) (*SetServerMemberInfoResp, error)
	// è·åæä¸ªç¨æ·å¨æå®é¨è½ä¸­çä¿¡æ¯
	GetUserInServerMembers(ctx context.Context, in *GetUserInServerMembersReq, opts ...grpc.CallOption) (*GetUserInServerMembersResp, error)
	// è·åé¨è½æåç¨æ·ID
	GetServerMemberUserIDs(ctx context.Context, in *GetServerMemberUserIDsReq, opts ...grpc.CallOption) (*GetServerMemberUserIDsResp, error)
	// æ¥è¯¢é¨è½ç»ä¸­å¯¹åºçº§å«çæå
	GetServerMemberRoleLevel(ctx context.Context, in *GetServerMemberRoleLevelReq, opts ...grpc.CallOption) (*GetServerMemberRoleLevelResp, error)
	GetServerMemberCache(ctx context.Context, in *GetServerMemberCacheReq, opts ...grpc.CallOption) (*GetServerMemberCacheResp, error)
	// è½¬è®©ç¾¤ä¸»
	TransferServerOwner(ctx context.Context, in *TransferServerOwnerReq, opts ...grpc.CallOption) (*TransferServerOwnerResp, error)
	// server_black
	BanServerMember(ctx context.Context, in *BanServerMemberReq, opts ...grpc.CallOption) (*BanServerMemberResp, error)
	CancelBanServerMember(ctx context.Context, in *CancelBanServerMemberReq, opts ...grpc.CallOption) (*CancelBanServerMemberResp, error)
	GetServerBlackList(ctx context.Context, in *GetServerBlackListReq, opts ...grpc.CallOption) (*GetServerBlackListResp, error)
}

type clubClient struct {
	cc grpc.ClientConnInterface
}

func NewClubClient(cc grpc.ClientConnInterface) ClubClient {
	return &clubClient{cc}
}

func (c *clubClient) CreateServer(ctx context.Context, in *CreateServerReq, opts ...grpc.CallOption) (*CreateServerResp, error) {
	out := new(CreateServerResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/createServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetServerRecommendedList(ctx context.Context, in *GetServerRecommendedListReq, opts ...grpc.CallOption) (*GetServerRecommendecListResp, error) {
	out := new(GetServerRecommendecListResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/getServerRecommendedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetServersInfo(ctx context.Context, in *GetServersInfoReq, opts ...grpc.CallOption) (*GetServersInfoResp, error) {
	out := new(GetServersInfoResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/getServersInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) JoinServer(ctx context.Context, in *JoinServerReq, opts ...grpc.CallOption) (*JoinServerResp, error) {
	out := new(JoinServerResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/joinServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) QuitServer(ctx context.Context, in *QuitServerReq, opts ...grpc.CallOption) (*QuitServerResp, error) {
	out := new(QuitServerResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/quitServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) DismissServer(ctx context.Context, in *DismissServerReq, opts ...grpc.CallOption) (*DismissServerResp, error) {
	out := new(DismissServerResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/dismissServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) SetServerInfo(ctx context.Context, in *SetServerInfoReq, opts ...grpc.CallOption) (*SetServerInfoResp, error) {
	out := new(SetServerInfoResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/setServerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) CreateGroupCategory(ctx context.Context, in *CreateGroupCategoryReq, opts ...grpc.CallOption) (*CreateGroupCategoryResp, error) {
	out := new(CreateGroupCategoryResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/createGroupCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) ServerApplicationResponse(ctx context.Context, in *ServerApplicationResponseReq, opts ...grpc.CallOption) (*ServerApplicationResponseResp, error) {
	out := new(ServerApplicationResponseResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/serverApplicationResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetServerApplicationList(ctx context.Context, in *GetServerApplicationListReq, opts ...grpc.CallOption) (*GetServerApplicationListResp, error) {
	out := new(GetServerApplicationListResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/getServerApplicationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetUserReqApplicationList(ctx context.Context, in *GetUserReqApplicationListReq, opts ...grpc.CallOption) (*GetUserReqApplicationListResp, error) {
	out := new(GetUserReqApplicationListResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/getUserReqApplicationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetServerUsersReqApplicationList(ctx context.Context, in *GetServerUsersReqApplicationListReq, opts ...grpc.CallOption) (*GetServerUsersReqApplicationListResp, error) {
	out := new(GetServerUsersReqApplicationListResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/getServerUsersReqApplicationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetJoinedServerGroupList(ctx context.Context, in *GetJoinedServerGroupListReq, opts ...grpc.CallOption) (*GetJoinedServerGroupListResp, error) {
	out := new(GetJoinedServerGroupListResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/getJoinedServerGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) CreateServerGroup(ctx context.Context, in *CreateServerGroupReq, opts ...grpc.CallOption) (*CreateServerGroupResp, error) {
	out := new(CreateServerGroupResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/createServerGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetServerMemberList(ctx context.Context, in *GetServerMemberListReq, opts ...grpc.CallOption) (*GetServerMemberListResp, error) {
	out := new(GetServerMemberListResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/getServerMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetServerMembersInfo(ctx context.Context, in *GetServerMembersInfoReq, opts ...grpc.CallOption) (*GetServerMembersInfoResp, error) {
	out := new(GetServerMembersInfoResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/getServerMembersInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) KickServerMember(ctx context.Context, in *KickServerMemberReq, opts ...grpc.CallOption) (*KickServerMemberResp, error) {
	out := new(KickServerMemberResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/kickServerMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetJoinedServerList(ctx context.Context, in *GetJoinedServerListReq, opts ...grpc.CallOption) (*GetJoinedServerListResp, error) {
	out := new(GetJoinedServerListResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/getJoinedServerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetServerMembersCMS(ctx context.Context, in *GetServerMembersCMSReq, opts ...grpc.CallOption) (*GetServerMembersCMSResp, error) {
	out := new(GetServerMembersCMSResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/getServerMembersCMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) MuteServerMember(ctx context.Context, in *MuteServerMemberReq, opts ...grpc.CallOption) (*MuteServerMemberResp, error) {
	out := new(MuteServerMemberResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/muteServerMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) CancelMuteServerMember(ctx context.Context, in *CancelMuteServerMemberReq, opts ...grpc.CallOption) (*CancelMuteServerMemberResp, error) {
	out := new(CancelMuteServerMemberResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/cancelMuteServerMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) SetServerMemberInfo(ctx context.Context, in *SetServerMemberInfoReq, opts ...grpc.CallOption) (*SetServerMemberInfoResp, error) {
	out := new(SetServerMemberInfoResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/setServerMemberInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetUserInServerMembers(ctx context.Context, in *GetUserInServerMembersReq, opts ...grpc.CallOption) (*GetUserInServerMembersResp, error) {
	out := new(GetUserInServerMembersResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/getUserInServerMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetServerMemberUserIDs(ctx context.Context, in *GetServerMemberUserIDsReq, opts ...grpc.CallOption) (*GetServerMemberUserIDsResp, error) {
	out := new(GetServerMemberUserIDsResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/getServerMemberUserIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetServerMemberRoleLevel(ctx context.Context, in *GetServerMemberRoleLevelReq, opts ...grpc.CallOption) (*GetServerMemberRoleLevelResp, error) {
	out := new(GetServerMemberRoleLevelResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/GetServerMemberRoleLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetServerMemberCache(ctx context.Context, in *GetServerMemberCacheReq, opts ...grpc.CallOption) (*GetServerMemberCacheResp, error) {
	out := new(GetServerMemberCacheResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/GetServerMemberCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) TransferServerOwner(ctx context.Context, in *TransferServerOwnerReq, opts ...grpc.CallOption) (*TransferServerOwnerResp, error) {
	out := new(TransferServerOwnerResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/transferServerOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) BanServerMember(ctx context.Context, in *BanServerMemberReq, opts ...grpc.CallOption) (*BanServerMemberResp, error) {
	out := new(BanServerMemberResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/banServerMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) CancelBanServerMember(ctx context.Context, in *CancelBanServerMemberReq, opts ...grpc.CallOption) (*CancelBanServerMemberResp, error) {
	out := new(CancelBanServerMemberResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/cancelBanServerMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetServerBlackList(ctx context.Context, in *GetServerBlackListReq, opts ...grpc.CallOption) (*GetServerBlackListResp, error) {
	out := new(GetServerBlackListResp)
	err := c.cc.Invoke(ctx, "/OpenIMServer.club.club/getServerBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubServer is the server API for Club service.
type ClubServer interface {
	// åå»ºé¨è½
	CreateServer(context.Context, *CreateServerReq) (*CreateServerResp, error)
	// è·åé¨è½åè¡¨
	GetServerRecommendedList(context.Context, *GetServerRecommendedListReq) (*GetServerRecommendecListResp, error)
	// è·åé¨è½è¯¦æ
	GetServersInfo(context.Context, *GetServersInfoReq) (*GetServersInfoResp, error)
	// å å¥é¨è½
	JoinServer(context.Context, *JoinServerReq) (*JoinServerResp, error)
	// éåºé¨è½
	QuitServer(context.Context, *QuitServerReq) (*QuitServerResp, error)
	// è§£æ£é¨è½
	DismissServer(context.Context, *DismissServerReq) (*DismissServerResp, error)
	// è®¾ç½®é¨è½ä¿¡æ¯
	SetServerInfo(context.Context, *SetServerInfoReq) (*SetServerInfoResp, error)
	// åå»ºåç»
	CreateGroupCategory(context.Context, *CreateGroupCategoryReq) (*CreateGroupCategoryResp, error)
	// é¨è½ä¸»æç®¡çåå¤çè¿é¨è½ç³è¯·
	ServerApplicationResponse(context.Context, *ServerApplicationResponseReq) (*ServerApplicationResponseResp, error)
	// ï¼ä»¥ç®¡çåæç¾¤ä¸»èº«ä»½ï¼è·åç¾¤çå é¨è½ç³è¯·
	GetServerApplicationList(context.Context, *GetServerApplicationListReq) (*GetServerApplicationListResp, error)
	// è·åç¨æ·èªå·±çä¸»å¨å é¨è½ç³è¯·
	GetUserReqApplicationList(context.Context, *GetUserReqApplicationListReq) (*GetUserReqApplicationListResp, error)
	// è·åè¯¥é¨è½ç¨æ·çå é¨è½ç³è¯·
	GetServerUsersReqApplicationList(context.Context, *GetServerUsersReqApplicationListReq) (*GetServerUsersReqApplicationListResp, error)
	// è·åæä¸ªäººå·²å å¥ç¾¤
	GetJoinedServerGroupList(context.Context, *GetJoinedServerGroupListReq) (*GetJoinedServerGroupListResp, error)
	// åå»ºé¨è½æ¿é´
	CreateServerGroup(context.Context, *CreateServerGroupReq) (*CreateServerGroupResp, error)
	// è·åæä¸ªé¨è½çé¨è½æå
	GetServerMemberList(context.Context, *GetServerMemberListReq) (*GetServerMemberListResp, error)
	// è·åæä¸ªé¨è½çæå®é¨è½æå
	GetServerMembersInfo(context.Context, *GetServerMembersInfoReq) (*GetServerMembersInfoResp, error)
	// è¸¢åºé¨è½
	KickServerMember(context.Context, *KickServerMemberReq) (*KickServerMemberResp, error)
	// è·åæä¸ªäººå·²å å¥é¨è½
	GetJoinedServerList(context.Context, *GetJoinedServerListReq) (*GetJoinedServerListResp, error)
	GetServerMembersCMS(context.Context, *GetServerMembersCMSReq) (*GetServerMembersCMSResp, error)
	// å¯¹æä¸ªé¨è½æåç¦è¨
	MuteServerMember(context.Context, *MuteServerMemberReq) (*MuteServerMemberResp, error)
	// å¯¹æä¸ªé¨è½æååæ¶ç¦è¨
	CancelMuteServerMember(context.Context, *CancelMuteServerMemberReq) (*CancelMuteServerMemberResp, error)
	// è®¾ç½®é¨è½æåä¿¡æ¯
	SetServerMemberInfo(context.Context, *SetServerMemberInfoReq) (*SetServerMemberInfoResp, error)
	// è·åæä¸ªç¨æ·å¨æå®é¨è½ä¸­çä¿¡æ¯
	GetUserInServerMembers(context.Context, *GetUserInServerMembersReq) (*GetUserInServerMembersResp, error)
	// è·åé¨è½æåç¨æ·ID
	GetServerMemberUserIDs(context.Context, *GetServerMemberUserIDsReq) (*GetServerMemberUserIDsResp, error)
	// æ¥è¯¢é¨è½ç»ä¸­å¯¹åºçº§å«çæå
	GetServerMemberRoleLevel(context.Context, *GetServerMemberRoleLevelReq) (*GetServerMemberRoleLevelResp, error)
	GetServerMemberCache(context.Context, *GetServerMemberCacheReq) (*GetServerMemberCacheResp, error)
	// è½¬è®©ç¾¤ä¸»
	TransferServerOwner(context.Context, *TransferServerOwnerReq) (*TransferServerOwnerResp, error)
	// server_black
	BanServerMember(context.Context, *BanServerMemberReq) (*BanServerMemberResp, error)
	CancelBanServerMember(context.Context, *CancelBanServerMemberReq) (*CancelBanServerMemberResp, error)
	GetServerBlackList(context.Context, *GetServerBlackListReq) (*GetServerBlackListResp, error)
}

// UnimplementedClubServer can be embedded to have forward compatible implementations.
type UnimplementedClubServer struct {
}

func (*UnimplementedClubServer) CreateServer(context.Context, *CreateServerReq) (*CreateServerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (*UnimplementedClubServer) GetServerRecommendedList(context.Context, *GetServerRecommendedListReq) (*GetServerRecommendecListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerRecommendedList not implemented")
}
func (*UnimplementedClubServer) GetServersInfo(context.Context, *GetServersInfoReq) (*GetServersInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServersInfo not implemented")
}
func (*UnimplementedClubServer) JoinServer(context.Context, *JoinServerReq) (*JoinServerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinServer not implemented")
}
func (*UnimplementedClubServer) QuitServer(context.Context, *QuitServerReq) (*QuitServerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitServer not implemented")
}
func (*UnimplementedClubServer) DismissServer(context.Context, *DismissServerReq) (*DismissServerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DismissServer not implemented")
}
func (*UnimplementedClubServer) SetServerInfo(context.Context, *SetServerInfoReq) (*SetServerInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServerInfo not implemented")
}
func (*UnimplementedClubServer) CreateGroupCategory(context.Context, *CreateGroupCategoryReq) (*CreateGroupCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupCategory not implemented")
}
func (*UnimplementedClubServer) ServerApplicationResponse(context.Context, *ServerApplicationResponseReq) (*ServerApplicationResponseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerApplicationResponse not implemented")
}
func (*UnimplementedClubServer) GetServerApplicationList(context.Context, *GetServerApplicationListReq) (*GetServerApplicationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerApplicationList not implemented")
}
func (*UnimplementedClubServer) GetUserReqApplicationList(context.Context, *GetUserReqApplicationListReq) (*GetUserReqApplicationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserReqApplicationList not implemented")
}
func (*UnimplementedClubServer) GetServerUsersReqApplicationList(context.Context, *GetServerUsersReqApplicationListReq) (*GetServerUsersReqApplicationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerUsersReqApplicationList not implemented")
}
func (*UnimplementedClubServer) GetJoinedServerGroupList(context.Context, *GetJoinedServerGroupListReq) (*GetJoinedServerGroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinedServerGroupList not implemented")
}
func (*UnimplementedClubServer) CreateServerGroup(context.Context, *CreateServerGroupReq) (*CreateServerGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServerGroup not implemented")
}
func (*UnimplementedClubServer) GetServerMemberList(context.Context, *GetServerMemberListReq) (*GetServerMemberListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMemberList not implemented")
}
func (*UnimplementedClubServer) GetServerMembersInfo(context.Context, *GetServerMembersInfoReq) (*GetServerMembersInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMembersInfo not implemented")
}
func (*UnimplementedClubServer) KickServerMember(context.Context, *KickServerMemberReq) (*KickServerMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickServerMember not implemented")
}
func (*UnimplementedClubServer) GetJoinedServerList(context.Context, *GetJoinedServerListReq) (*GetJoinedServerListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinedServerList not implemented")
}
func (*UnimplementedClubServer) GetServerMembersCMS(context.Context, *GetServerMembersCMSReq) (*GetServerMembersCMSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMembersCMS not implemented")
}
func (*UnimplementedClubServer) MuteServerMember(context.Context, *MuteServerMemberReq) (*MuteServerMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteServerMember not implemented")
}
func (*UnimplementedClubServer) CancelMuteServerMember(context.Context, *CancelMuteServerMemberReq) (*CancelMuteServerMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMuteServerMember not implemented")
}
func (*UnimplementedClubServer) SetServerMemberInfo(context.Context, *SetServerMemberInfoReq) (*SetServerMemberInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServerMemberInfo not implemented")
}
func (*UnimplementedClubServer) GetUserInServerMembers(context.Context, *GetUserInServerMembersReq) (*GetUserInServerMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInServerMembers not implemented")
}
func (*UnimplementedClubServer) GetServerMemberUserIDs(context.Context, *GetServerMemberUserIDsReq) (*GetServerMemberUserIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMemberUserIDs not implemented")
}
func (*UnimplementedClubServer) GetServerMemberRoleLevel(context.Context, *GetServerMemberRoleLevelReq) (*GetServerMemberRoleLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMemberRoleLevel not implemented")
}
func (*UnimplementedClubServer) GetServerMemberCache(context.Context, *GetServerMemberCacheReq) (*GetServerMemberCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMemberCache not implemented")
}
func (*UnimplementedClubServer) TransferServerOwner(context.Context, *TransferServerOwnerReq) (*TransferServerOwnerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferServerOwner not implemented")
}
func (*UnimplementedClubServer) BanServerMember(context.Context, *BanServerMemberReq) (*BanServerMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanServerMember not implemented")
}
func (*UnimplementedClubServer) CancelBanServerMember(context.Context, *CancelBanServerMemberReq) (*CancelBanServerMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBanServerMember not implemented")
}
func (*UnimplementedClubServer) GetServerBlackList(context.Context, *GetServerBlackListReq) (*GetServerBlackListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerBlackList not implemented")
}

func RegisterClubServer(s *grpc.Server, srv ClubServer) {
	s.RegisterService(&_Club_serviceDesc, srv)
}

func _Club_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).CreateServer(ctx, req.(*CreateServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetServerRecommendedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerRecommendedListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetServerRecommendedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/GetServerRecommendedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetServerRecommendedList(ctx, req.(*GetServerRecommendedListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetServersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServersInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetServersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/GetServersInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetServersInfo(ctx, req.(*GetServersInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_JoinServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).JoinServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/JoinServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).JoinServer(ctx, req.(*JoinServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_QuitServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).QuitServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/QuitServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).QuitServer(ctx, req.(*QuitServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_DismissServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DismissServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).DismissServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/DismissServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).DismissServer(ctx, req.(*DismissServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_SetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).SetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/SetServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).SetServerInfo(ctx, req.(*SetServerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_CreateGroupCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).CreateGroupCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/CreateGroupCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).CreateGroupCategory(ctx, req.(*CreateGroupCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_ServerApplicationResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerApplicationResponseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).ServerApplicationResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/ServerApplicationResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).ServerApplicationResponse(ctx, req.(*ServerApplicationResponseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetServerApplicationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerApplicationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetServerApplicationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/GetServerApplicationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetServerApplicationList(ctx, req.(*GetServerApplicationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetUserReqApplicationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReqApplicationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetUserReqApplicationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/GetUserReqApplicationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetUserReqApplicationList(ctx, req.(*GetUserReqApplicationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetServerUsersReqApplicationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerUsersReqApplicationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetServerUsersReqApplicationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/GetServerUsersReqApplicationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetServerUsersReqApplicationList(ctx, req.(*GetServerUsersReqApplicationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetJoinedServerGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJoinedServerGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetJoinedServerGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/GetJoinedServerGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetJoinedServerGroupList(ctx, req.(*GetJoinedServerGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_CreateServerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).CreateServerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/CreateServerGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).CreateServerGroup(ctx, req.(*CreateServerGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetServerMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetServerMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/GetServerMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetServerMemberList(ctx, req.(*GetServerMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetServerMembersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerMembersInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetServerMembersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/GetServerMembersInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetServerMembersInfo(ctx, req.(*GetServerMembersInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_KickServerMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickServerMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).KickServerMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/KickServerMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).KickServerMember(ctx, req.(*KickServerMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetJoinedServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJoinedServerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetJoinedServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/GetJoinedServerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetJoinedServerList(ctx, req.(*GetJoinedServerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetServerMembersCMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerMembersCMSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetServerMembersCMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/GetServerMembersCMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetServerMembersCMS(ctx, req.(*GetServerMembersCMSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_MuteServerMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteServerMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).MuteServerMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/MuteServerMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).MuteServerMember(ctx, req.(*MuteServerMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_CancelMuteServerMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMuteServerMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).CancelMuteServerMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/CancelMuteServerMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).CancelMuteServerMember(ctx, req.(*CancelMuteServerMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_SetServerMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServerMemberInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).SetServerMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/SetServerMemberInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).SetServerMemberInfo(ctx, req.(*SetServerMemberInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetUserInServerMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInServerMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetUserInServerMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/GetUserInServerMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetUserInServerMembers(ctx, req.(*GetUserInServerMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetServerMemberUserIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerMemberUserIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetServerMemberUserIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/GetServerMemberUserIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetServerMemberUserIDs(ctx, req.(*GetServerMemberUserIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetServerMemberRoleLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerMemberRoleLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetServerMemberRoleLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/GetServerMemberRoleLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetServerMemberRoleLevel(ctx, req.(*GetServerMemberRoleLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetServerMemberCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerMemberCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetServerMemberCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/GetServerMemberCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetServerMemberCache(ctx, req.(*GetServerMemberCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_TransferServerOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferServerOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).TransferServerOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/TransferServerOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).TransferServerOwner(ctx, req.(*TransferServerOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_BanServerMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanServerMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).BanServerMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/BanServerMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).BanServerMember(ctx, req.(*BanServerMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_CancelBanServerMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBanServerMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).CancelBanServerMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/CancelBanServerMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).CancelBanServerMember(ctx, req.(*CancelBanServerMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetServerBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetServerBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMServer.club.club/GetServerBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetServerBlackList(ctx, req.(*GetServerBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Club_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OpenIMServer.club.club",
	HandlerType: (*ClubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createServer",
			Handler:    _Club_CreateServer_Handler,
		},
		{
			MethodName: "getServerRecommendedList",
			Handler:    _Club_GetServerRecommendedList_Handler,
		},
		{
			MethodName: "getServersInfo",
			Handler:    _Club_GetServersInfo_Handler,
		},
		{
			MethodName: "joinServer",
			Handler:    _Club_JoinServer_Handler,
		},
		{
			MethodName: "quitServer",
			Handler:    _Club_QuitServer_Handler,
		},
		{
			MethodName: "dismissServer",
			Handler:    _Club_DismissServer_Handler,
		},
		{
			MethodName: "setServerInfo",
			Handler:    _Club_SetServerInfo_Handler,
		},
		{
			MethodName: "createGroupCategory",
			Handler:    _Club_CreateGroupCategory_Handler,
		},
		{
			MethodName: "serverApplicationResponse",
			Handler:    _Club_ServerApplicationResponse_Handler,
		},
		{
			MethodName: "getServerApplicationList",
			Handler:    _Club_GetServerApplicationList_Handler,
		},
		{
			MethodName: "getUserReqApplicationList",
			Handler:    _Club_GetUserReqApplicationList_Handler,
		},
		{
			MethodName: "getServerUsersReqApplicationList",
			Handler:    _Club_GetServerUsersReqApplicationList_Handler,
		},
		{
			MethodName: "getJoinedServerGroupList",
			Handler:    _Club_GetJoinedServerGroupList_Handler,
		},
		{
			MethodName: "createServerGroup",
			Handler:    _Club_CreateServerGroup_Handler,
		},
		{
			MethodName: "getServerMemberList",
			Handler:    _Club_GetServerMemberList_Handler,
		},
		{
			MethodName: "getServerMembersInfo",
			Handler:    _Club_GetServerMembersInfo_Handler,
		},
		{
			MethodName: "kickServerMember",
			Handler:    _Club_KickServerMember_Handler,
		},
		{
			MethodName: "getJoinedServerList",
			Handler:    _Club_GetJoinedServerList_Handler,
		},
		{
			MethodName: "getServerMembersCMS",
			Handler:    _Club_GetServerMembersCMS_Handler,
		},
		{
			MethodName: "muteServerMember",
			Handler:    _Club_MuteServerMember_Handler,
		},
		{
			MethodName: "cancelMuteServerMember",
			Handler:    _Club_CancelMuteServerMember_Handler,
		},
		{
			MethodName: "setServerMemberInfo",
			Handler:    _Club_SetServerMemberInfo_Handler,
		},
		{
			MethodName: "getUserInServerMembers",
			Handler:    _Club_GetUserInServerMembers_Handler,
		},
		{
			MethodName: "getServerMemberUserIDs",
			Handler:    _Club_GetServerMemberUserIDs_Handler,
		},
		{
			MethodName: "GetServerMemberRoleLevel",
			Handler:    _Club_GetServerMemberRoleLevel_Handler,
		},
		{
			MethodName: "GetServerMemberCache",
			Handler:    _Club_GetServerMemberCache_Handler,
		},
		{
			MethodName: "transferServerOwner",
			Handler:    _Club_TransferServerOwner_Handler,
		},
		{
			MethodName: "banServerMember",
			Handler:    _Club_BanServerMember_Handler,
		},
		{
			MethodName: "cancelBanServerMember",
			Handler:    _Club_CancelBanServerMember_Handler,
		},
		{
			MethodName: "getServerBlackList",
			Handler:    _Club_GetServerBlackList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "club/club.proto",
}
